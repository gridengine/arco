#!/bin/sh
#
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__
#
#+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#
#
# $SGE_ROOT/dbwriter/bin/sgedbwriter_template
#
# DO NOT EDIT THIS FILE - this file is used as an template
# Don't change the markers #+-#+-#+-# and "#-#-#-#" , they will be removed
#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
#
# DB Writer Startup script template
#
# This script can be called with the following arguments:
#
#       start       start the dbwriter as background process
#       run         run the dbwriter
#       stop        terminates the dbwriter 
#                   
#---------------------------------------------------------------------------
# The following lines provide the necessary info for adding a startup script
# according to the Linux Standard Base Specification (LSB) 1.0.0 which can
# be found at:
#
#    http://www.linuxbase.org/spec/gLSB/gLSB/sysinit.html
#
# See also
#
#    http://www.suse.de/~grimmer/Package-Conventions/index.html
#
### BEGIN INIT INFO
# Provides:       sgedbwriter 
# Required-Start: $network 
# Required-Stop:
# Default-Start:  3 5
# Default-Stop: 0 1 2 6
# Description:  start Grid Engine dbwriter
### END INIT INFO
#---------------------------------------------------------------------------

# --------------------------------------------------------------------------
# Setup a clean path
# --------------------------------------------------------------------------
PATH=/bin:/usr/bin:/sbin:/usr/sbin

# --------------------------------------------------------------------------
# setup the base environment
# --------------------------------------------------------------------------
SGE_ROOT=@@SGE_ROOT@@; export SGE_ROOT
SGE_CELL=@@SGE_CELL@@; export SGE_CELL
JAVA_HOME=@@JAVA_HOME@@; export JAVA_HOME

ARCH=`$SGE_ROOT/util/arch`


UTILBIN_DIR=$SGE_ROOT/utilbin/$ARCH

if [ ! -d $UTILBIN_DIR ]; then
   echo "utilbin directory $UTILBIN_DIR not found"
   exit 1
fi

#---------------------------------------------------------------------------
# GetAdminUser
#    echo the name of the admin user on this system
#    echo root if admin user retrieval fails
#---------------------------------------------------------------------------
GetAdminUser()
{
   cfgname=$SGE_ROOT/$SGE_CELL/common/bootstrap
   user=none

   if [ -f $cfgname ]; then
      user=`grep admin_user $cfgname | awk '{ print $2 }'`
   fi

   if [ `echo $user|tr "[A-Z]" "[a-z]"` = "none" ]; then
      user=root
   fi
   echo $user
}

# ------------------------------------------------------------------------
# Print a usage message and exit
# ------------------------------------------------------------------------
usage()
{
   echo "usage: $0 [-debug] [-debug_port <port>] (start|stop)"
   echo "    start   start the dbwriter as background process (default)"
   echo "    stop    stop the dbwriter"   
   echo ""
   echo "    -debug              start the dbwriter in in debug mode"
   echo "    -debug_port <port>  port for debugging (default 8000)"
   exit 1
}

#---------------------------------------------------------------------------
# Shutdown
# Send SIGTERM to process name $1 with pid in file $2
#
Shutdown()
{
   name=$1
   pidfile=$2
   if [ -r $pidfile ]; then
      pid=`cat $pidfile`
      $UTILBIN_DIR/checkprog $pid $name > /dev/null
      if [ "$?" = 0 ]; then
         ExecuteAsAdmin kill -TERM $pid
      fi
      sleep 1
      $UTILBIN_DIR/checkprog $pid $name > /dev/null
      if [ "$?" = 0 ]; then
         sleep 30
         ExecuteAsAdmin kill  $pid
      fi
      $UTILBIN_DIR/checkprog $pid $name > /dev/null
      if [ "$?" = 0 ]; then
         sleep 30
         ExecuteAsAdmin kill -9 $pid
      fi
   else 
	  echo "Can not read pid file $pidfile"
	  exit 1
   fi
}

CheckDbWriterRunning() {
   name=$1
   pidfile=$2
   i=0
   while [ $i -lt 5 ]; do
      if [ -r $pidfile ]; then
         pid=`cat $pidfile`
         $UTILBIN_DIR/checkprog $pid $name > /dev/null
         if [ "$?" = 0 ]; then
            echo $pid
            return 0
         fi
      fi
      sleep 2
      i=`expr $i + 1`
   done
   return 1
}


#-------------------------------------------------------------------------
# Execute command as user $ADMINUSER and exit if exit status != 0
# if ADMINUSER = default then execute command unchanged
#
# uses binary "adminrun" form SGE distribution
#
# USES: variables "$verbose"    (if set to "true" print arguments)
#                  $ADMINUSER   (if set to "default" do not use "adminrun)
#                 "UTILBIN_DIR"  (path to the binary in utilbin)
#--------------------------------------------------------------------------
ExecuteAsAdmin()
{
   ADMINUSER=`GetAdminUser`
   if [ "$verbose" = true ]; then
      echo $*
   fi

   if [ $ADMINUSER = default ]; then
      $*
   else
      $UTILBIN_DIR/adminrun $ADMINUSER "$@" 
   fi

   return 0
}

# -------------------------------------------------------------------------
# Test if the dbwriter is running
#
# returns 0  if dbwriter is running
#         1  if pidfile is available, but dbwriter is not running
#         2  if pidfile does not exist
# -------------------------------------------------------------------------
Status() {
    name=$1
    pidfile=$2
    if [ -r $pidfile ]; then
	  pid=`cat $pidfile`
	  $UTILBIN_DIR/checkprog $pid $name > /dev/null
	  if [ "$?" = 0 ]; then
	    echo "dbwriter is running (pid $pid)"
          return 0
        else 
          echo "dbwriter is not running"
          return 1
	  fi
     else 
	  echo "dbwriter is not running"
        return 2
     fi
}


# --------------------------------------------------------------------------
# MAIN Procedure
# --------------------------------------------------------------------------


DEBUG=false
DEBUG_PORT=8000
PARAM=start

while [ $# -gt 0 ]; do
   case "$1" in
     "-debug")
	     DEBUG=true; shift;;
     "-debug_port")	     
	     shift 
		 if [ $# -lt 1 ]; then
		    usage
	     fi
		 DEBUG_PORT=$1
		 shift;;
     "start")
	     PARAM=start; shift;;
     "stop")
	     PARAM=stop; shift;;
	  "status")
	     PARAM=status; shift;;
     *)
	   echo "Unknown option $1"
	   usage;;
   esac
done

SPOOL_DIR=`ExecuteAsAdmin sh $SGE_ROOT/dbwriter/util/dbwriter.sh print spool_dir`
if [ $? -ne 0 ]; then
  echo "Error: Can not determine spool directory of the dbwriter"
  echo "       Check the dbwriter configuration file"
  exit 1
fi

PID_FILE=`ExecuteAsAdmin sh $SGE_ROOT/dbwriter/util/dbwriter.sh print pid_file`
if [ $? -ne 0 ]; then
  echo "Error: Can not determine pid file of the dbwriter"
  echo "       Check the dbwriter configuration file"
  exit 1
fi

LOG_FILE=`ExecuteAsAdmin sh $SGE_ROOT/dbwriter/util/dbwriter.sh print log_file`
if [ $? -ne 0 ]; then
  echo "Error: Can not determine log file of the dbwriter"
  echo "       Check the dbwriter configuration file"
  exit 1
fi

case $PARAM in
   "start")

      Status java $PID_FILE > /dev/null 2>&1
      case $? in
        0) pid=`cat $PID_FILE`
           echo "ERROR: dbwriter is already running (pid = $pid)"; exit 1;;
        1) pid=`cat $PID_FILE`
           echo "ERROR: pid file $PID_FILE exists, but dbwriter (pid = $pid) is not running";
           echo "       Delete the pid file";
           exit;;
        # 2 means pid file not found
      esac       

      # Allow to pass in special JVMARGS, e.g. for instrumented code
      if [ "x$DBWRITER_JVMARGS" = "x" ]; then
         JVMARGS=""
      else
         JVMARGS="$DBWRITER_JVMARGS"
      fi

    # Setup the JVM options---------------------------------------------------
      . $SGE_ROOT/dbwriter/inst_util.sh
      if [ "$DEBUG" = "true" ]; then
            echo "starting dbwriter in debug mode (port=$DEBUG_PORT)"
            # 6439438 sgedbwriter -debug  does not continue 
            # check for java version and set up the JVMARGS
            NUM_J150=`versionString2Num "1.5.0"`
            DBG_JAVA_VERSION=`$JAVA_HOME/bin/java -version 2>&1 | head -1`
            DBG_JAVA_VERSION=`echo $DBG_JAVA_VERSION | awk '{print $3}' | sed -e "s/\"//g"`
            NUM_DBG_JAVA_VERSION=`versionString2Num $DBG_JAVA_VERSION`
            if [ $NUM_DBG_JAVA_VERSION -lt $NUM_J150 ]; then
            # echo "starting dbwriter -Xrunjdwp on jdk $DBG_JAVA_VERSION" 
              JVMARGS="$JVMARGS -server -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$DEBUG_PORT"
            else
            # echo "starting dbwriter -agentlib on jdk $DBG_JAVA_VERSION" 
              JVMARGS="$JVMARGS -server -Xdebug -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$DEBUG_PORT"
            fi
      else
         echo "starting dbwriter"
         JVMARGS="$JVMARGS -server"
      fi 

      
      # set java.library.path and the data model (32-bit/64-bit)
      JVMARGS="$JVMARGS -Djava.library.path=@@JAVA_LIBRARY_PATH@@ @@JAVA_DATA_MODEL@@"
      export JVMARGS
      
      if [ ! -f $LOG_FILE ]; then
         ExecuteAsAdmin touch $LOG_FILE
         if [ $? -ne 0 ]; then
            echo "Can not create log file $LOG_FILE"
            exit 1
         fi
      fi
      
      ExecuteAsAdmin nohup sh $SGE_ROOT/dbwriter/util/dbwriter.sh > /dev/null 2>&1 &

      pid=`CheckDbWriterRunning java $PID_FILE`
      if [ $? -eq 0 ]; then
         [ -d /var/lock/subsys -a -w /var/lock/subsys ] && touch /var/lock/subsys/sgedbwriter
         echo "dbwriter started (pid=$pid)"
      else 
         echo "dbwriter failed!"
         echo "Check log file $LOG_FILE"
         exit 1
      fi
      ;;
   "stop")
      Shutdown java $PID_FILE
      [ -f /var/lock/subsys/sgedbwriter ] && rm -f /var/lock/subsys/sgedbwriter;;
   "status")
		Status java $PID_FILE;;
   *)
      echo "invalid parameter $PARAM"   
      usage;;
esac

