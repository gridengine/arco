#!/bin/sh
#
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__
#
#+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#+-#+-#-+-#
#
# $SGE_ROOT/dbwriter/bin/sgedbwriter_template
#
# DO NOT EDIT THIS FILE - this file is used as an template
# Don't change the markers #+-#+-#+-# and "#-#-#-#" , they will be removed
#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
#
# DB Writer Startup script template
#
# To see the usage of this script, run it with the -h option
#
#---------------------------------------------------------------------------
# The following lines provide the necessary info for adding a startup script
# according to the Linux Standard Base Specification (LSB) 1.0.0 which can
# be found at:
#
#    http://www.linuxbase.org/spec/gLSB/gLSB/sysinit.html
#
# See also
#
#    http://www.suse.de/~grimmer/Package-Conventions/index.html
#
### BEGIN INIT INFO
# Provides:       GENSGESVC
# Required-Start: $network
# Required-Stop:
# Default-Start:  3 5
# Default-Stop: 0 1 2 6
# Description:  start Grid Engine dbwriter
### END INIT INFO
#---------------------------------------------------------------------------

# --------------------------------------------------------------------------
# Setup a clean path
# --------------------------------------------------------------------------
PATH=/bin:/usr/bin:/sbin:/usr/sbin

# --------------------------------------------------------------------------
# setup the base environment
# --------------------------------------------------------------------------
SGE_ROOT=@@SGE_ROOT@@; export SGE_ROOT
SGE_CELL=@@SGE_CELL@@; export SGE_CELL
JAVA_HOME=@@JAVA_HOME@@; export JAVA_HOME

ARCH=`$SGE_ROOT/util/arch`


UTILBIN_DIR=$SGE_ROOT/utilbin/$ARCH

if [ ! -d $UTILBIN_DIR ]; then
   echo "utilbin directory $UTILBIN_DIR not found"
   exit 1
fi

#---------------------------------------------------------------------------
# GetAdminUser
#    echo the name of the admin user on this system
#    echo root if admin user retrieval fails
#---------------------------------------------------------------------------
GetAdminUser()
{
   cfgname=$SGE_ROOT/$SGE_CELL/common/bootstrap
   user=none

   if [ -f $cfgname ]; then
      user=`grep admin_user $cfgname | awk '{ print $2 }'`
   fi

   if [ `echo $user|tr "[A-Z]" "[a-z]"` = "none" ]; then
      user=root
   fi
   echo $user
}

# ------------------------------------------------------------------------
# Print a usage message and exit
# ------------------------------------------------------------------------
usage()
{
   echo "usage: $0 [start|stop] [-debug] [-debug_port <port>] [-nosmf] [print <setting>] [-h]"
   echo "    start   start the dbwriter as background process (default)"
   echo "    stop    stop the dbwriter"
   echo ""
   echo "    -debug              start the dbwriter in in debug mode"
   echo "    -debug_port <port>  port for debugging (default 8000)"
   echo ""
   echo "    -nosmf              force no SMF"
   echo ""
   echo "    print   dbwriter setting is printed to stdout. "
   echo "            The following settings are available:"
   echo ""
   echo "               pid_file   print the default pid file"
   echo "               log_file   print the default log file"
   echo "               spool_dir  print the default spool directory"
   echo "    -h      this help text is printed"
   echo ""
   echo "  If no options are specified, dbwriter is started. "
   echo "  The content environment variable JVMARGS is treated as options"
   echo "  for the java virtual machine. If JAVA_HOME is set the"
   echo "  Java virtual machine at \$JAVA_HOME/bin/java is started"
}

#---------------------------------------------------------------------------
# Shutdown
# Send SIGTERM to process name $1 with pid in file $2
#
Shutdown()
{
   name=$1
   pidfile=$2
   if [ -r $pidfile ]; then
      pid=`cat $pidfile`
      $UTILBIN_DIR/checkprog $pid $name > /dev/null
      if [ "$?" = 0 ]; then
         ExecuteAsAdmin kill -TERM $pid
      fi
      sleep 1
      $UTILBIN_DIR/checkprog $pid $name > /dev/null
      if [ "$?" = 0 ]; then
         sleep 30
         ExecuteAsAdmin kill  $pid
      fi
      $UTILBIN_DIR/checkprog $pid $name > /dev/null
      if [ "$?" = 0 ]; then
         sleep 30
         ExecuteAsAdmin kill -9 $pid
      fi
   else
	  echo "Can not read pid file $pidfile"
	  exit 1
   fi
}

CheckDbWriterRunning() {
   name=$1
   pidfile=$2
   i=0
   while [ $i -lt 10 ]; do
      if [ -r $pidfile ]; then
         pid=`cat $pidfile 2>/dev/null`
         if [ "$pid" != "" ]; then
            $UTILBIN_DIR/checkprog $pid $name > /dev/null
            if [ "$?" = 0 ]; then
               echo $pid
               return 0
            fi
         fi
      fi
      sleep 2
      i=`expr $i + 1`
   done
   return 1
}

checkSpoolDir() {
   if [ ! -d "$1" ]; then
      echo "Creating dbwriter spool directory $1"
      ExecuteAsAdmin mkdir -p $1
      if [ $? -ne 0 ]; then
         echo "Can't create dbwriter spool directory $1"
         exit 1
      fi
   fi
}

#-------------------------------------------------------------------------
# Execute command as user $ADMINUSER and exit if exit status != 0
# if ADMINUSER = default then execute command unchanged
#
# uses binary "adminrun" form SGE distribution
#
# USES: variables "$verbose"    (if set to "true" print arguments)
#                  $ADMINUSER   (if set to "default" do not use "adminrun)
#                 "$SGE_UTILBIN"  (path to the binary in utilbin)
#
ExecuteAsAdmin()
{
   ADMINUSER=`GetAdminUser`
   if [ "$verbose" = true ]; then
      echo $*
   fi

   if [ $ADMINUSER = default ]; then
      $*
   else
      $UTILBIN_DIR/adminrun $ADMINUSER "$@"
   fi

   return 0
}


#---------------------------------------------------------------------------
# DetectSMFService - sets service to a mask maching the name
# $1 ... name
#
DetectSMFService()
{
   name=$1
   service=""

   if [ "$noSMF" = true ]; then
      return
   fi
   #Otherwise we try is it's available of the system
   if [ -f /lib/svc/share/smf_include.sh ]; then
      . /lib/svc/share/smf_include.sh
      smf_present
      if [ $? -ne 0 ]; then
         return
      fi
   else
      return
   fi

   #Check we have cluster_name file
   if [ ! -r "$SGE_ROOT/$SGE_CELL/common/cluster_name" ]; then
      echo "Error: could not find $SGE_ROOT/$SGE_CELL/common/cluster_name!"
      exit $SMF_EXIT_ERR_CONFIG
   fi
   #Cluster name must be unique
   SGE_CLUSTER_NAME=`cat $SGE_ROOT/$SGE_CELL/common/cluster_name 2>/dev/null`

   service="svc:/application/sge/$name:$SGE_CLUSTER_NAME"

   #Check if service exists
   /usr/bin/svcs $service > /dev/null 2>&1
   if [ $? -ne 0 ]; then
      #No such service found in the system
      service=""
   fi
}


# -------------------------------------------------------------------------
# Test if the dbwriter is running
#
# returns 0  if dbwriter is running
#         1  if pidfile is available, but dbwriter is not running
#         2  if pidfile does not exist
# -------------------------------------------------------------------------
Status() {
    name=$1
    pidfile=$2
    if [ -r $pidfile ]; then
       pid=`cat $pidfile`
       $UTILBIN_DIR/checkprog $pid $name > /dev/null
       if [ "$?" = 0 ]; then
          echo "dbwriter is running (pid $pid)"
          return 0
       else
          echo "dbwriter is not running"
          return 1
       fi
    else
       echo "dbwriter is not running"
       return 2
    fi
}


# --------------------------------------------------------------------------
# Start the dbwriter
# --------------------------------------------------------------------------
startDBWriter() {

   # --------------------------------------------------------------------------
   # Setup the classpath
   # Allow setting of an initial classpath, e.g. for running instrumented code
   # (code coverage).
   # --------------------------------------------------------------------------
   if [ "x$DBWRITER_CLASSPATH" != "x" ]; then
      CP=$DBWRITER_CLASSPATH
   fi

   LIBDIR=$SGE_ROOT/dbwriter/lib
   for i in $LIBDIR/*.jar
   do
     if [ "$CP" = "" ]; then
        CP="$i"
     else
        CP="$CP:$i"
     fi
   done

   if [ "$JVMARGS" = "" ]; then
      JVMARGS="-classpath $CP"
   else
      JVMARGS="$JVMARGS -classpath $CP"
   fi

   if [ "$JAVA_HOME" = "" ]; then
      JAVA=`which java`
   else
      JAVA=$JAVA_HOME/bin/java
   fi

   DBWRITER_OPTIONS=""
   USE_DEFAULT_LOG_FILE=1
   USE_DEFAULT_PID_FILE=1
   while [ $# -gt 1 ]; do
      if [ "$1" = "-pid" -a $# -gt 1 ]; then
        shift
        USE_DEFAULT_PID_FILE=0
        PID_FILE=$1
        DBWRITER_OPTIONS="$DBWRITER_OPTIONS -pid \"$PID_FILE\""
      elif [ "$1" = "-logfile" -a  $# -gt 1 ]; then
         shift
         USE_DEFAULT_LOG_FILE=0
         LOG_FILE=$1
         DBWRITER_OPTIONS="$DBWRITER_OPTIONS -logfile \"$LOG_FILE\""
      else
        DBWRITER_OPTIONS="$DBWRITER_OPTIONS \"$1\""
      fi
      shift
   done

   if [ $USE_DEFAULT_PID_FILE -eq 1 ]; then
      DBWRITER_OPTIONS="$DBWRITER_OPTIONS -pid $PID_FILE"
   fi
   if [ $USE_DEFAULT_LOG_FILE -eq 1 ]; then
      DBWRITER_OPTIONS="$DBWRITER_OPTIONS -logfile $LOG_FILE"
   fi
   ExecuteAsAdmin $JAVA $JVMARGS com/sun/grid/reporting/dbwriter/ReportingDBWriter $DBWRITER_OPTIONS &
   #We have no way to ensure that service is really being provided, so we just sleep and hope it is after that
   sleep 1
}

# --------------------------------------------------------------------------
# Print a setting
# --------------------------------------------------------------------------
printSetting () {
   if [ $# -ne 1 ]; then
     usage
     exit 1
   fi
   echo "printSetting got args: $*"

   case "$1" in
      "pid_file")  echo "$PID_FILE"; exit 0;;
      "log_file")  echo "$LOG_FILE"; exit 0;;
      "spool_dir") echo "$SPOOL_DIR"; exit 0;;
      "*")         echo "Unknown setting $1"; exit 1;;
   esac
}

# --------------------------------------------------------------------------
# MAIN Procedure
# --------------------------------------------------------------------------


DEBUG=false
DEBUG_PORT=8000
PARAM=start
noSMF=false

while [ $# -gt 0 ]; do
   case "$1" in
     "-h")    usage; exit 0;;
     "-debug")
	     DEBUG=true; shift;;
     "-debug_port")
	     shift
             if [ $# -lt 1 ]; then
		usage; exit 1;
	     fi
             DEBUG_PORT=$1
             shift;;
     "print")
             PARAM="print"; shift;  break;;
     "start")
	     PARAM=start; shift;;
     "stop")
	     PARAM=stop; shift;;
     "status")
	     PARAM=status; shift;;
     "-nosmf")
             noSMF=true; shift;;
     *)
	   echo "Unknown option $1"
	   usage; exit 1;;
   esac
done

if [ "$SGE_ROOT" = "" ]; then
   echo "Can not start dbwriter, SGE_ROOT not set"
   exit 1
fi

if [ "$SGE_CELL" = "" ]; then
   echo "Can not start dbwriter, SGE_CELL not set"
   exit 1
fi

DetectSMFService dbwriter
if [ -n "$service" ]; then
   ERR_EXIT_CODE=$SMF_EXIT_ERR_CONFIG
else
   ERR_EXIT_CODE=1
fi


DBWRITER_CONF=$SGE_ROOT/$SGE_CELL/common/dbwriter.conf

if [ ! -r $DBWRITER_CONF ]; then
   echo "Can not read dbwriter configuration file ($DBWRITER_CONF)"
   exit $ERR_EXIT_CODE
fi
# --------------------------------------------------------------------------
# Source the dbwriter config
# --------------------------------------------------------------------------
. $DBWRITER_CONF
if [ $? -ne 0 ]; then
   echo "Can not source dbwriter configuration file ($DBWRITER_CONF)"
   exit $ERR_EXIT_CODE
fi

if [ "$SPOOL_DIR" = "" ]; then
   echo "Sorry, no SPOOL_DIR defined. Check the dbwriter configuration"
   echo "($DBWRITER_CONF)"
   exit $ERR_EXIT_CODE
fi

# From now on errors are fatal for SMF
if [ -n "$service" ]; then
   ERR_EXIT_CODE=$SMF_EXIT_ERR_FATAL
fi

PID_FILE=$SPOOL_DIR/dbwriter.pid
LOG_FILE=$SPOOL_DIR/dbwriter.log

case $PARAM in
   "start")
      if [ \( -z "$SMF_FMRI" -o "$SMF_FMRI" != "$service" \) -a -n "$service" ]; then
         /usr/sbin/svcadm enable -st $service
         exit $?
      fi
      Status java $PID_FILE > /dev/null 2>&1
      case $? in
        0) pid=`cat $PID_FILE`
           echo "ERROR: dbwriter is already running (pid = $pid)"; exit 1;;
        1) pid=`cat $PID_FILE`
           echo "ERROR: pid file $PID_FILE exists, but dbwriter (pid = $pid) is not running ";
           echo "       on this host. Inpect the \$SPOOL_DIR/dbwriter.log file to verify if ";
           echo "       dbwriter is not running on a different host. If it is not running, ";
           echo "       delete the pid file."
           exit $ERR_EXIT_CODE;;
        # 2 means pid file not found
      esac

      checkSpoolDir $SPOOL_DIR

      # Allow to pass in special JVMARGS, e.g. for instrumented code
      if [ "x$DBWRITER_JVMARGS" = "x" ]; then
         JVMARGS=""
      else
         JVMARGS="$DBWRITER_JVMARGS"
      fi

      # Setup the JVM options---------------------------------------------------
      . $SGE_ROOT/dbwriter/inst_util.sh
      if [ "$DEBUG" = "true" ]; then
            echo "starting dbwriter in debug mode (port=$DEBUG_PORT)"
            JVMARGS="$JVMARGS -server -Xdebug -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$DEBUG_PORT"
      else
         echo "starting dbwriter"
         JVMARGS="$JVMARGS -server"
      fi


      # set java.library.path and the data model (32-bit/64-bit)
      JVMARGS="$JVMARGS -Djava.library.path=@@JAVA_LIBRARY_PATH@@ @@JAVA_DATA_MODEL@@"
      export JVMARGS

      if [ ! -f $LOG_FILE ]; then
         ExecuteAsAdmin touch $LOG_FILE
         if [ $? -ne 0 ]; then
            echo "Can not create log file $LOG_FILE"
            exit $ERR_EXIT_CODE
         fi
      fi

      startDBWriter

      pid=`CheckDbWriterRunning java $PID_FILE`
      if [ $? -eq 0 ]; then
         [ -d /var/lock/subsys -a -w /var/lock/subsys ] && touch /var/lock/subsys/sgedbwriter
         echo "dbwriter started (pid=$pid)"
      else
         echo "dbwriter failed!"
         echo "Check log file $LOG_FILE"
         exit 1
      fi
      ;;
   "stop")
      if [ -n "$service" ]; then
         /usr/sbin/svcadm disable -st $service
         exit $?
      fi
      Shutdown java $PID_FILE
      [ -f /var/lock/subsys/sgedbwriter ] && rm -f /var/lock/subsys/sgedbwriter;;
   "status")
      Status java $PID_FILE;;
   "print")
      printSetting $@;;
   *)
      echo "invalid parameter $PARAM"
      usage; exit 1;;
esac

