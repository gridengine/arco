<!--

#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

-->
<DBModel>
  <!-- ======================================================================= -->
  <version id="0" name="6.0">
    <item>
       <description>Create table sge_job</description>
       <sql>       
         CREATE TABLE sge_job (
             j_id integer,
             j_open integer default 1,
             j_job_number integer,
             j_task_number integer,
             j_pe_taskid varchar(128),
             j_job_name varchar(512),
             j_group varchar(50),
             j_owner varchar(50),
             j_account varchar(512),
             j_priority integer,
             j_submission_time datetime,
             j_project varchar(512),
             j_department varchar(512),
             PRIMARY KEY (j_id)
         )
       </sql>
    </item>
    <item>
       <description>Create index sge_job_idx0</description>
       <sql>
         CREATE INDEX sge_job_idx0 ON sge_job (j_job_number, j_task_number, j_pe_taskid, j_open)
       </sql>
    </item>
    <item>
       <description>Create index sge_job_idx1</description>
       <sql>
         CREATE INDEX sge_job_idx1 ON sge_job (j_submission_time)
       </sql>
    </item>
    <item>
       <description>create table sge_job_usage</description>
       <sql>
         CREATE TABLE sge_job_usage (
             ju_id integer,
             ju_parent integer,
             ju_curr_time datetime,
             ju_qname varchar(50),
             ju_hostname varchar(128),
             ju_start_time datetime,
             ju_end_time datetime,
             ju_failed integer,
             ju_exit_status integer,
             ju_granted_pe varchar(50),
             ju_slots integer,
             ju_state varchar(50),
             ju_ru_wallclock integer,
             ju_ru_utime double precision,
             ju_ru_stime double precision,
             ju_ru_maxrss integer,
             ju_ru_ixrss integer,
             ju_ru_issmrss integer,
             ju_ru_idrss integer,
             ju_ru_isrss integer,
             ju_ru_minflt integer,
             ju_ru_majflt integer,
             ju_ru_nswap integer,
             ju_ru_inblock integer,
             ju_ru_outblock integer,
             ju_ru_msgsnd integer,
             ju_ru_msgrcv integer,
             ju_ru_nsignals integer,
             ju_ru_nvcsw integer,
             ju_ru_nivcsw integer,
             ju_cpu double precision,
             ju_mem double precision,
             ju_io double precision,
             ju_iow double precision,
             ju_maxvmem double precision,
             PRIMARY KEY (ju_id),
             FOREIGN KEY (ju_parent) REFERENCES sge_job (j_id)
         )
       </sql>
    </item>
    <item>
       <description>Create table sge_job_log</description>
       <sql>
         CREATE TABLE sge_job_log (
             jl_id integer,
             jl_parent integer,
             jl_time datetime,
             jl_event varchar(50),
             jl_state varchar(50),
             jl_user varchar(50),
             jl_host varchar(128),
             jl_state_time integer,
             jl_message varchar(512),
             PRIMARY KEY (jl_id),
             FOREIGN KEY (jl_parent) REFERENCES sge_job (j_id)
         )
      </sql>
    </item>
    <item>
       <description>Create table sge_job_request</description>
       <sql>
         CREATE TABLE sge_job_request (
             jr_id integer,
             jr_parent integer,
             jr_variable varchar(50),
             jr_value varchar(512),
             PRIMARY KEY (jr_id),
             FOREIGN KEY (jr_parent) REFERENCES sge_job (j_id)
         )
       </sql>
    </item>
    <item>
       <description>Create table sge_queue</description>
       <sql>
         CREATE TABLE sge_queue (
             q_id integer,
             q_qname varchar(50),
             q_hostname varchar(128),
             PRIMARY KEY (q_id)
         )       
       </sql>
    </item>
    <item>
       <description>Create index sge_queue_idx0</description>
       <sql>
         CREATE INDEX sge_queue_idx0 ON sge_queue (q_qname, q_hostname)
       </sql>
    </item>
    <item>
       <description>Create table sge_queue_values</description>
       <sql>
         CREATE TABLE sge_queue_values (
             qv_id integer,
             qv_parent integer,
             qv_dvalue double precision,
             qv_dconfig double precision,
             qv_time_start datetime,
             qv_time_end datetime,
             qv_variable varchar(50),
             qv_svalue varchar(512),
             FOREIGN KEY (qv_parent) REFERENCES sge_queue (q_id)
         )        
       </sql>
    </item>
    <item>
       <description>Create index sge_queue_values_idx0</description>
       <sql>
         CREATE INDEX sge_queue_values_idx0 on sge_queue_values (qv_parent, qv_variable, qv_time_end)
       </sql>
    </item>
    <item>
       <description>Create table sge_host</description>
       <sql>
         CREATE TABLE sge_host (
             h_id integer,
             h_hostname varchar(128),
             PRIMARY KEY (h_id)
         )
       </sql>
    </item>
    <item>
       <description>Create index sge_host_idx0</description>
       <sql>
        CREATE INDEX sge_host_idx0 ON sge_host (h_hostname)
       </sql>
    </item>
    <item>
       <description>Create table sge_host_values</description>
       <sql>
         CREATE TABLE sge_host_values (
             hv_id integer,
             hv_parent integer,
             hv_time_start datetime,
             hv_time_end datetime,
             hv_variable varchar(50),
             hv_svalue varchar(512),
             hv_dvalue double precision,
             hv_dconfig double precision,
             PRIMARY KEY (hv_id),
             FOREIGN KEY (hv_parent) REFERENCES sge_host (h_id)
         )
       </sql>
    </item>
    <item>
       <description>Create index sge_host_values_idx0</description>
       <sql>
         CREATE INDEX sge_host_values_idx0 on sge_host_values (hv_parent, hv_variable, hv_time_end)
       </sql>
    </item>
    <item>
       <description>Create table sge_department</description>
       <sql>
         CREATE TABLE sge_department (
           d_id integer,
           d_department varchar(50),
           PRIMARY KEY (d_id)
         )
       </sql>
    </item>
    <item>
       <description>Create index sge_department_idx0</description>
       <sql>
         CREATE INDEX sge_department_idx0 ON sge_department (d_department)
       </sql>
    </item>
    <item>
       <description>Create table sge_department_values</description>
       <sql>
         CREATE TABLE sge_department_values (
             dv_id integer,
             dv_parent integer,
             dv_time_start datetime,
             dv_time_end datetime,
             dv_variable varchar(50),
             dv_svalue varchar(512),
             dv_dvalue double precision,
             dv_dconfig double precision,
             PRIMARY KEY (dv_id),
             FOREIGN KEY (dv_parent) REFERENCES sge_department (d_id)
         )       
       </sql>
    </item>
    <item>
       <description>Create index sge_department_values_idx0</description>
       <sql>
         CREATE INDEX sge_department_values_idx0 on sge_department_values (dv_parent, dv_variable, dv_time_end)
       </sql>
    </item>
    <item>
       <description>Create table sge_project</description>
       <sql>
         CREATE TABLE sge_project (
             p_id integer,
             p_project varchar(50),
             PRIMARY KEY (p_id)
         )
       </sql>
    </item>
    <item>
       <description>Create index sge_project_idx0</description>
       <sql>
         CREATE INDEX sge_project_idx0 ON sge_project (p_project)
       </sql>
    </item>
    <item>
       <description>Create table sge_project_values</description>
       <sql>
         CREATE TABLE sge_project_values (
             pv_id integer,
             pv_parent integer,
             pv_time_start datetime,
             pv_time_end datetime,
             pv_variable varchar(50),
             pv_svalue varchar(512),
             pv_dvalue double precision,
             pv_dconfig double precision,
             PRIMARY KEY (pv_id),
             FOREIGN KEY (pv_parent) REFERENCES sge_project (p_id)
         )       
       </sql>
    </item>
    <item>
       <description>Create index sge_project_values_idx0</description>
       <sql>
        CREATE INDEX sge_project_values_idx0 on sge_project_values (pv_parent, pv_variable, pv_time_end)
       </sql>
    </item>
    <item>
       <description>Create table sge_user</description>
       <sql>
         CREATE TABLE sge_user (
             u_id integer,
             u_user varchar(50),
             PRIMARY KEY (u_id)
         )       
       </sql>
    </item>
    <item>
       <description>Create table sge_user_values</description>
       <sql>
         CREATE TABLE sge_user_values (
             uv_id integer,
             uv_parent integer,
             uv_time_start datetime,
             uv_time_end datetime,
             uv_variable varchar(50),
             uv_svalue varchar(512),
             uv_dvalue double precision,
             uv_dconfig double precision,
             PRIMARY KEY (uv_id),
             FOREIGN KEY (uv_parent) REFERENCES sge_user (u_id)
         )       
       </sql>
    </item>
    <item>
       <description>Create index sge_user_values_idx0</description>
       <sql>
         CREATE INDEX sge_user_values_idx0 on sge_user_values (uv_parent, uv_variable, uv_time_end)
       </sql>
    </item>
    <item>
       <description>Create table sge_group</description>
       <sql>
         CREATE TABLE sge_group (
             g_id integer,
             g_group varchar(50),
             PRIMARY KEY (g_id)
         )       
       </sql>
    </item>
    <item>
       <description>Create index sge_group_idx0</description>
       <sql>
          CREATE INDEX sge_group_idx0 ON sge_group (g_group)
       </sql>
    </item>
    <item>
       <description>Creat table sge_group_values</description>
       <sql>
         CREATE TABLE sge_group_values (
             gv_id integer,
             gv_parent integer,
             gv_time_start datetime,
             gv_time_end datetime,
             gv_variable varchar(50),
             gv_svalue varchar(512),
             gv_dvalue double precision,
             gv_dconfig double precision,
             PRIMARY KEY (gv_id),
             FOREIGN KEY (gv_parent) REFERENCES sge_group (g_id)
         )       
       </sql>
    </item>
    <item>
       <description>Create index sge_group_values_idx0</description>
       <sql>
        CREATE INDEX sge_group_values_idx0 on sge_group_values (gv_parent, gv_variable, gv_time_end)
       </sql>
    </item>
    <item>
       <description>Create table sge_share_log</description>
       <sql>
         CREATE TABLE sge_share_log (
             sl_id integer,
             sl_curr_time datetime,
             sl_usage_time datetime,
             sl_node varchar(1024),
             sl_user varchar(50),
             sl_project varchar(50),
             sl_shares integer,
             sl_job_count integer,
             sl_level double precision,
             sl_total double precision,
             sl_long_target_share double precision,
             sl_short_target_share double precision,
             sl_actual_share double precision,
             sl_usage double precision,
             sl_cpu double precision,
             sl_mem double precision,
             sl_io double precision,
             sl_ltcpu double precision,
             sl_ltmem double precision,
             sl_ltio double precision,
             PRIMARY KEY (sl_id)
         )
       </sql>
    </item>
    <item>
       <description>Create view view_accounting</description>
       <sql>
         CREATE OR REPLACE VIEW view_accounting AS 
            SELECT j_job_number AS job_number, j_task_number AS task_number, 
                   j_pe_taskid AS pe_taskid,
                   j_job_name AS name, j_group AS groupname, j_owner AS username, 
                   j_account AS account, 
                   j_project AS project, j_department AS department,
                   j_submission_time AS submission_time,
                   ju_start_time AS start_time, ju_end_time AS end_time,
                   ju_ru_wallclock AS wallclock_time,
                   ju_cpu AS cpu, ju_mem AS mem, ju_io AS io, ju_iow AS iow, 
                   ju_maxvmem AS maxvmem,
                   ju_start_time - j_submission_time AS wait_time,
                   ju_end_time -   j_submission_time AS turnaround_time
            FROM sge_job, sge_job_usage
            WHERE j_id = ju_parent
               AND j_submission_time > timestamp '1970-01-02 00:00:00' AND ju_start_time >= j_submission_time
       </sql>
    </item>
    <item>
       <description>Create view view_job_times</description>
       <sql>
         CREATE OR REPLACE VIEW view_job_times AS
            SELECT * FROM view_accounting
            WHERE pe_taskid = 'none'       
       </sql>
    </item>
    <item>
       <description>Create view view_jobs_completed</description>
       <sql>
           CREATE OR REPLACE VIEW view_jobs_completed AS 
            SELECT date_format(ju_end_time, '%Y-%m-%d %H:00:00') AS time, count(ju_id) AS completed
            FROM sge_job_usage 
            WHERE ju_end_time > '1970-01-02'
            GROUP BY time
       </sql>
    </item>
    <item>
       <description>Create view view_job_log</description>
       <sql>
         CREATE OR REPLACE VIEW view_job_log AS
            SELECT j_job_number  AS job_number, 
                   j_task_number AS task_number,
                   j_pe_taskid   AS pe_taskid,
                   j_job_name    AS name, 
                   j_group       AS groupname, 
                   j_owner       AS username,
                   j_account AS account,
                   j_project AS project, j_department AS department,
                   jl_time AS time, jl_event AS event, jl_state AS state,
                   jl_user AS initiator, jl_host AS host, jl_message AS message
            FROM sge_job, sge_job_log
            WHERE j_id = jl_parent
       </sql>
    </item>
    <item>
       <description>Create view view_department_values</description>
       <sql>
         CREATE OR REPLACE VIEW view_department_values AS
            SELECT d_department AS department, 
                   dv_time_start AS time_start, dv_time_end AS time_end,
                   dv_variable AS variable, dv_svalue AS str_value,
                   dv_dvalue AS num_value, dv_dconfig as num_config
            FROM sge_department, sge_department_values 
            WHERE d_id = dv_parent       
       </sql>
    </item>
    <item>
       <description>Create view view_group_values</description>
       <sql>
         CREATE OR REPLACE VIEW view_group_values AS
            SELECT g_group AS groupname, 
                   gv_time_start AS time_start, gv_time_end AS time_end,
                   gv_variable AS variable, gv_svalue AS str_value,
                   gv_dvalue AS num_value, gv_dconfig as num_config
            FROM sge_group, sge_group_values 
            WHERE g_id = gv_parent
       </sql>
    </item>
    <item>
       <description>Create view_host_values</description>
       <sql>
         CREATE or REPLACE VIEW view_host_values AS
            SELECT h_hostname AS hostname, 
                   hv_time_start AS time_start, hv_time_end AS time_end,
                   hv_variable AS variable, hv_svalue AS str_value,
                   hv_dvalue AS num_value, hv_dconfig as num_config
            FROM sge_host, sge_host_values 
            WHERE h_id = hv_parent
       </sql>
    </item>
    <item>
       <description>Create view view_project_values</description>
       <sql>
         CREATE OR REPLACE VIEW view_project_values AS
            SELECT p_project AS project, 
                   pv_time_start AS time_start, pv_time_end AS time_end,
                   pv_variable AS variable, pv_svalue AS str_value,
                   pv_dvalue AS num_value, pv_dconfig as num_config 
            FROM sge_project, sge_project_values 
            WHERE p_id = pv_parent       
       </sql>
    </item>
    <item>
       <description>Create view view_queue_values</description>
       <sql>
         CREATE OR REPLACE VIEW view_queue_values AS
            SELECT q_qname AS qname, q_hostname AS hostname,
                   qv_time_start AS time_start, qv_time_end AS time_end,
                   qv_variable AS variable, qv_svalue AS str_value,
                   qv_dvalue AS num_value, qv_dconfig as num_config 
            FROM sge_queue, sge_queue_values 
            WHERE q_id = qv_parent       
       </sql>
    </item>
    <item>
       <description>Create view view_user_values</description>
       <sql>
         CREATE OR REPLACE VIEW view_user_values AS
            SELECT u_user AS username, 
                   uv_time_start AS time_start, uv_time_end AS time_end,
                   uv_variable AS variable, uv_svalue AS str_value,
                   uv_dvalue AS num_value, uv_dconfig as num_config 
            FROM sge_user, sge_user_values 
            WHERE u_id = uv_parent       
       </sql>
    </item>
    
  <!-- ========================privileges===================================== -->  

  <!--
  <item>
       <description>grant privileges on database views to '{READ_USER}'@'localhost'</description>
       <sql>GRANT SELECT, SHOW VIEW ON {DB_NAME}.* TO '{READ_USER}'@'localhost'</sql>
    </item>
    
    <item>
       <description>grant privileges on database views to '{READ_USER}'@'{DB_HOST}'</description>
       <sql>GRANT SELECT, SHOW VIEW ON {DB_NAME}.* TO '{READ_USER}'@'{DB_HOST}'</sql>
    </item>
  -->
    <item>
       <description>grant privileges on database views to '{READ_USER}'@'%'</description>
       <sql>GRANT SELECT, SHOW VIEW ON {DB_NAME}.* TO '{READ_USER}'@'%'</sql>
    </item>

    </version>
  <!-- ======================================================================= -->
  <version id="1" name="6.0u1">
     <!-- with the version 6.0u1 the versioning table was created -->
     <item>
        <description>Create table sge_version</description>
        <sql>
         CREATE TABLE sge_version (
             v_id       integer,
             v_version  VARCHAR(50),
             v_time     datetime,
             PRIMARY KEY(v_id)
         )
        </sql>
     </item>
     <item>
        <description>Update view view_job_times</description>
        <sql>
          CREATE OR REPLACE VIEW view_job_times AS
                       SELECT * FROM view_accounting
                       WHERE pe_taskid = 'NONE'
        </sql>
     </item>
     <item>
        <description>Update version table</description>
        <sql>
          INSERT INTO sge_version (v_id, v_version,v_time)
                      VALUES( 1, '6.0u1', current_timestamp )
        </sql>
     </item>
  </version>

  <!-- ======================================================================= -->
  <version id="2" name="6.0u8">
    <item>
       <description>Create index on column owner of table sge_job</description>
       <sql>
         CREATE INDEX sge_job_idx2 ON sge_job (j_owner)
       </sql>
    </item>
    <item>
       <description>Create index on columns ju_end_time and ju_hostname of table sge_job_usage</description>
       <sql>
         CREATE INDEX sge_job_usage_idx0 ON sge_job_usage (ju_end_time , ju_hostname)
       </sql>
    </item>
     <item>
        <description>Update version table</description>
        <sql>
          INSERT INTO sge_version (v_id, v_version,v_time)
                      VALUES( 2, '6.0u8', current_timestamp )
        </sql>
     </item>
  </version>
  
  <!-- ======================================================================= -->
  <version id="3" name="6.0u10">
     <item>
        <description>Update version table</description>
        <sql>
          INSERT INTO sge_version (v_id, v_version, v_time)
                      VALUES(3, '6.0u10', current_timestamp)
        </sql>
     </item>
  </version>
  
  <!-- ======================================================================= -->

  <version id="4" name="6.1">
     <item>
        <description>Create table sge_statistic</description>
        <sql>
           CREATE TABLE sge_statistic (
           s_id integer,
           s_name varchar(50),
           PRIMARY KEY(s_id)
           );
        </sql>
     </item>
     <item>
        <description>Create table sge_statistic_values</description>
        <sql>
           CREATE TABLE sge_statistic_values (
           sv_id integer,
           sv_parent integer,
           sv_time_start datetime,
           sv_time_end datetime,
           sv_variable varchar(50),
           sv_dvalue   double precision,             
           PRIMARY KEY(sv_id),
           FOREIGN KEY (sv_parent) REFERENCES sge_statistic (s_id)
           );
        </sql>
     </item>
     <item>
        <description>Create index sge_statistic_values_idx0</description>
        <sql>
           CREATE INDEX sge_statistic_values_idx0 on sge_statistic_values (sv_parent, sv_variable, sv_time_end)
        </sql>
     </item>
     <item>
        <description>Create view view_statistic</description>
        <sql>
           CREATE VIEW view_statistic AS
           SELECT s_name AS name, 
           sv_time_start AS time_start, 
           sv_time_end AS time_end,
           sv_variable AS variable,
           sv_dvalue AS num_value
           FROM sge_statistic, sge_statistic_values 
           WHERE s_id = sv_parent
        </sql>
     </item>
     <item>
        <description>grant privileges to sge_statistic</description>
        <sql>GRANT SELECT ON sge_statistic TO {READ_USER}</sql>
     </item>
     <item>
        <description>grant privileges to sge_statistic_values</description>
        <sql>GRANT SELECT ON sge_statistic_values TO {READ_USER}</sql>
     </item>
     <item>
        <description>grant privileges to view_statistic</description>
        <sql>GRANT SELECT ON view_statistic TO {READ_USER}</sql>
     </item>
     <item>
        <description>Update version table</description>
        <sql>
           INSERT INTO sge_version (v_id, v_version, v_time)
           VALUES(4, '6.1', current_timestamp)
        </sql>
     </item>
  </version>
  
  <!-- ======================================================================= -->
  <!-- We do not need to add indexes for sge_job_usage, sge_job_log, sge_job_request
       as it is done for this db version in Postgres and Oracle because MySQL
       creates indexes on FOREIGN KEYS automatically. -->
       
  <version id="5" name="6.1u1">     
     <item>
        <description>Create primary key on sge_queue_values</description>
        <sql>
           ALTER TABLE sge_queue_values add PRIMARY KEY(qv_id); 
        </sql>          
     </item>    
     <item>
        <description>Update version table</description>
        <sql>
           INSERT INTO sge_version (v_id, v_version, v_time)
           VALUES(5, '6.1u1', current_timestamp)
        </sql>
     </item>
  </version>
  
  <!-- ======================================================================= -->
 
 <version id="6" name="6.1u3">
      <!-- CR 6618599 - Long running jobs cause incorrect usage summary from ARCo database
           The old incorrect records need to be corrected -->
      <!-- CR 6620930 - ARCO view_accounting filters out parallel job usage incorrectly
         fixed in version 7 6.2-->      
      <item>
         <description>
            Create view view_fixed_stimes - view containing the correct start_times 
            for the intermediate line and ju_exit_status.
        </description>
        <sql>
            CREATE VIEW view_fixed_stimes AS SELECT
               u1.ju_parent,
               u1.ju_id,
               coalesce(max(u2.ju_end_time)) as fstart_time,
               u1.ju_end_time,
               CASE
                  WHEN u1.ju_end_time = max(u3.ju_end_time) then u1.ju_exit_status
                  ELSE -1
               END as fexit_status
            FROM
               sge_job_usage u1
               LEFT OUTER JOIN sge_job_usage u2
                  ON u2.ju_parent = u1.ju_parent
                  AND u2.ju_end_time &lt; u1.ju_end_time
               LEFT OUTER JOIN sge_job_usage u3
                  ON u3.ju_parent = u1.ju_parent   
            GROUP BY
               u1.ju_parent,
               u1.ju_id,
               u1.ju_start_time,
               u1.ju_end_time,
               u1.ju_exit_status
            ORDER BY
               u1.ju_parent,
               u1.ju_id
        </sql>
      </item>
      <item>
         <description>
            Update sge_job_usage with the correct ju_start_time values for
            intermediate lines and ju_exit_status.
         </description>
         <sql>
            UPDATE sge_job_usage AS o, view_fixed_stimes AS p
            SET
               o.ju_start_time = p.fstart_time,
               o.ju_exit_status = p.fexit_status
            WHERE
               o.ju_id = p.ju_id
         </sql>            
      </item>
      <item>
         <description>
            Create view view_fixed_usages - view containing the correct usages 
            (ju_cpu, ju_mem, ju_io, ju_iow) for the intermediate line.
         </description>
         <sql>
            CREATE VIEW view_fixed_usages AS SELECT
               u1.ju_parent,
               u1.ju_id,
               2*max(u2.ju_cpu) - sum(u2.ju_cpu) as ju_cpu,
               2*max(u2.ju_mem) - sum(u2.ju_mem) as ju_mem, 
               2*max(u2.ju_io) - sum(u2.ju_io) as ju_io, 
               2*max(u2.ju_iow) - sum(u2.ju_iow) as ju_iow
            FROM
               sge_job_usage u1
               LEFT OUTER JOIN sge_job_usage u2
                  ON u2.ju_parent = u1.ju_parent
            GROUP BY
               u1.ju_parent,
               u1.ju_id,
               u1.ju_cpu,
               u1.ju_mem,
               u1.ju_io,
               u1.ju_iow
            HAVING
               u1.ju_cpu = max(u2.ju_cpu)
            ORDER BY
               u1.ju_parent,
               u1.ju_id
         </sql>
      </item>
      <item>
         <description>
            Update sge_job_usage with the correct ju_cpu, ju_mem, ju_io, ju_iow 
            values for the intermediate line
         </description>
         <sql>            
            UPDATE sge_job_usage AS o, view_fixed_usages AS n
            SET
                o.ju_cpu = n.ju_cpu,
                o.ju_mem = n.ju_mem,
                o.ju_io = n.ju_io,
                o.ju_iow = n.ju_iow
            WHERE 
                o.ju_id = n.ju_id
         </sql>
      </item>
      <item>
         <description>Drop view view_fixed_stimes</description>
         <sql>
            DROP VIEW view_fixed_stimes
         </sql>
      </item>      
      <item>
         <description>Drop view view_fixed_usages</description>
         <sql>
            DROP VIEW view_fixed_usages
         </sql>
      </item>              
      <item>
         <description>Update version table</description>
         <sql>
            INSERT INTO sge_version (v_id, v_version, v_time)
            VALUES(6, '6.1u3', current_timestamp)
         </sql>
      </item>
   </version>
   <!-- ======================================================================= --> 
      <version id="7" name="6.1u4">
      <!-- with the version 6.1u4 the checkpoint is written to the database after
           each succesful batch execution. The reporting.checkpoint is no longer used.-->
      <item>
         <description>Create table sge_version</description>
         <sql>
            CREATE TABLE sge_checkpoint (
            ch_id       integer,
            ch_line     integer,
            ch_time     datetime,
            PRIMARY KEY(ch_id)
            )
         </sql>
      </item>
      
      <item>
         <description>Insert first value in the checkpoint table</description>
         <sql>
            INSERT INTO sge_checkpoint (ch_id, ch_line, ch_time)
            VALUES(1, 0, current_timestamp)
         </sql>
      </item>  
      
      <item>
         <description>Update version table</description>
         <sql>
            INSERT INTO sge_version (v_id, v_version, v_time)
            VALUES(7, '6.1u4', current_timestamp)
         </sql>
      </item>
   </version>

<!-- ======================================================================= -->   
<version id="8" name="6.2">     
   <item>
      <description>Create table sge_ar</description>
      <sql>
         CREATE TABLE sge_ar (
         ar_id INTEGER,
         ar_number INTEGER,
         ar_owner VARCHAR(128),
         ar_submission_time DATETIME,
         PRIMARY KEY (ar_id)
         )
      </sql>
   </item>
   <item>
      <description>Create index sge_ar_idx0 on column ar_number</description>
      <sql>CREATE INDEX sge_ar_idx0 ON sge_ar (ar_number)</sql>       
   </item>
   <item>
      <description>Create index sge_ar_idx1 on column ar_owner</description>
      <sql>CREATE INDEX sge_ar_idx1 ON sge_ar (ar_owner)</sql>       
   </item>    
   <item>
      <description>Create table sge_ar_attribute</description>
      <sql>
         CREATE TABLE sge_ar_attribute (
         ara_id INTEGER,
         ara_parent INTEGER,
         ara_curr_time DATETIME,
         ara_name VARCHAR(512),
         ara_account VARCHAR(512),
         ara_start_time DATETIME,
         ara_end_time DATETIME,
         ara_granted_pe VARCHAR(128),
         PRIMARY KEY (ara_id),
         FOREIGN KEY (ara_parent) REFERENCES sge_ar (ar_id) ON DELETE CASCADE
         )
      </sql>
   </item>
   <item>
      <description>Create index sge_ar_attribute_idx0 on column ara_end_time</description>
      <sql>CREATE INDEX sge_ar_attribute_idx0 ON sge_ar_attribute (ara_end_time)</sql>       
   </item>
   <item>
      <description>Create table sge_ar_usage</description>
      <sql>
         CREATE TABLE sge_ar_usage (
         aru_id INTEGER,
         aru_parent INTEGER,
         aru_termination_time DATETIME,
         aru_qname VARCHAR(512),
         aru_hostname VARCHAR(128),
         aru_slots INTEGER,
         PRIMARY KEY (aru_id),
         FOREIGN KEY (aru_parent) REFERENCES sge_ar (ar_id)
         )
      </sql>
   </item> 
   <item>
      <description>Create table sge_ar_log</description>
      <sql>
         CREATE TABLE sge_ar_log (
         arl_id INTEGER,
         arl_parent INTEGER,
         arl_time DATETIME,
         arl_event VARCHAR(50),
         arl_state VARCHAR(50),
         arl_message VARCHAR(512),
         PRIMARY KEY (arl_id),
         FOREIGN KEY (arl_parent) REFERENCES sge_ar (ar_id)
         )
      </sql>
   </item>
   <item>
      <description>Create index sge_ar_log_idx0 on column arl_event</description>
      <sql>CREATE INDEX sge_ar_log_idx0 ON sge_ar_log (arl_event)</sql>       
   </item>    
   <item>
      <description>Create table sge_ar_resource_usage</description>
      <sql>
         CREATE TABLE sge_ar_resource_usage (
         arru_id INTEGER,
         arru_parent INTEGER,
         arru_variable VARCHAR(50),
         arru_value VARCHAR(512),
         PRIMARY KEY (arru_id),
         FOREIGN KEY (arru_parent) REFERENCES sge_ar (ar_id)
         )       
      </sql>
   </item>
   <item>
      <description>Add the column ju_ar_number to sge_job_usage table</description>
      <sql>
         ALTER TABLE sge_job_usage ADD ju_ar_number INTEGER DEFAULT 0
      </sql>
   </item>    
   <item>
      <description>Create index sge_job_usage_idx2 on column ju_ar_number</description>
      <sql>
         CREATE INDEX sge_job_usage_idx2 ON sge_job_usage (ju_ar_number)
      </sql>          
   </item>    
   <item>
      <description>Drop view view_job_times</description>
      <sql>
         DROP VIEW view_job_times
      </sql>
   </item>    
   <item>
      <description>Drop view view_accounting</description>
      <sql>
         DROP VIEW view_accounting
      </sql>
   </item> 
   <item>
      <description>Drop view view_jobs_completed</description>
      <sql>
         DROP VIEW view_jobs_completed
      </sql>
   </item>
   <item>
      <description>Update view view_accounting</description>
      <sql>
         CREATE or REPLACE VIEW view_accounting AS 
         SELECT j_job_number AS job_number, 
                j_task_number AS task_number, 
                j_pe_taskid AS pe_taskid,
                j_job_name AS name, 
                j_group AS groupname, 
                j_owner AS username,
                j_account AS account, 
                j_project AS project, 
                j_department AS department,
                j_submission_time AS submission_time, 
                ju_ar_number AS ar_number,
                ju_start_time AS start_time, 
                ju_end_time as end_time, 
                ju_ru_wallclock AS wallclock_time,
                ju_cpu AS cpu, 
                ju_mem AS mem, 
                ju_io AS io, 
                ju_iow AS iow, 
                ju_maxvmem AS maxvmem,
                ju_exit_status AS exit_status
         FROM sge_job, sge_job_usage
         WHERE j_id = ju_parent
         AND ju_start_time >= j_submission_time
      </sql>
   </item>
   <!-- MySQL doesn't support subqueries in FROM clause of views, therefore we 
        create the subquery view -->
   <item>
      <description>Create view view_job_times_subquery</description>
      <sql>
         CREATE VIEW view_job_times_subquery AS
         SELECT j_id,
                ju_ar_number,
                MIN(ju_start_time) AS start_time,
                MAX(ju_end_time) AS end_time,
                MAX(ju_ru_wallclock) AS wallclock_time,
                MAX(ju_exit_status) AS exit_status
         FROM sge_job, sge_job_usage
         WHERE j_id = ju_parent
         AND ju_start_time >= j_submission_time
         GROUP BY j_id, ju_ar_number
      </sql>
   </item>
   <!-- for the jobs running over night we have one record in the view, for 
        not yet finished jobs exit_status is -1 -->   
   <item>
      <description>Update view view_job_times</description>
      <sql>
         CREATE OR REPLACE VIEW view_job_times AS
            SELECT j_job_number AS job_number, 
                   j_task_number AS task_number,
                   j_job_name AS name, 
                   j_group AS groupname, 
                   j_owner AS username,
                   j_account AS account,
                   j_project AS project, 
                   j_department AS department,
                   j_submission_time AS submission_time,
                   ju_ar_number AS ar_number,
                   start_time, end_time,
                   (start_time - j_submission_time) AS wait_time,
                   (end_time - j_submission_time) AS turnaround_time,                  
                   (end_time - start_time) AS job_duration,
                   wallclock_time, exit_status
            FROM 
                sge_job u1
                LEFT OUTER JOIN
                view_job_times_subquery u2
                ON u1.j_id = u2.j_id
            WHERE start_time >= j_submission_time
            AND j_pe_taskid = 'NONE'
      </sql>
   </item>   
   <item>
      <description>Update view view_jobs_completed</description>
      <sql>
         CREATE OR REPLACE VIEW view_jobs_completed AS
         SELECT date_format(ju_end_time, '%Y-%m-%d %H:00:00') AS time,
                count(ju_id) AS completed, ju_ar_number AS ar_number
         FROM sge_job, sge_job_usage 
         WHERE j_id = ju_parent
         AND ju_exit_status != -1
         AND j_pe_taskid = 'NONE'
         GROUP BY time, ar_number
      </sql>
   </item> 
   <item>
      <description>Create view view_ar_attribute</description>
      <sql>
         CREATE OR REPLACE VIEW view_ar_attribute AS
         SELECT ar_number AS ar_number,
         ar_owner AS owner,
         ar_submission_time AS submission_time,
         ara_name AS name,
         ara_account AS account,
         ara_start_time AS start_time,
         ara_end_time AS end_time,
         ara_granted_pe AS granted_pe
         FROM sge_ar, sge_ar_attribute
         WHERE ar_id = ara_parent       
      </sql>
   </item>    
   <item>
      <description>Create view view_ar_log</description>
      <sql>
         CREATE OR REPLACE VIEW view_ar_log AS
         SELECT ar_number AS ar_number,
         arl_time AS time,
         arl_event AS event,
         arl_state AS state,
         arl_message AS message
         FROM sge_ar, sge_ar_log
         WHERE ar_id = arl_parent
      </sql>
   </item>    
   <item>
      <description>Create view view_ar_usage</description>
      <sql>
         CREATE OR REPLACE VIEW view_ar_usage AS 
         SELECT ar_number AS ar_number,
         aru_termination_time AS termination_time,
         aru_qname AS queue,
         aru_hostname AS hostname,
         aru_slots AS slots
         FROM sge_ar, sge_ar_usage
         WHERE ar_id = aru_parent
      </sql>   
   </item>     
   <item>
      <description>Create view view_ar_resource_usage</description>
      <sql>
         CREATE OR REPLACE VIEW view_ar_resource_usage AS
         SELECT ar_number AS ar_number,
         arru_variable AS variable,
         arru_value AS value
         FROM sge_ar, sge_ar_resource_usage
         WHERE ar_id = arru_parent
      </sql>        
   </item>     
   <item>
      <description>
         Create view view_ar_time_usage 
      </description>
      <sql>
         CREATE OR REPLACE VIEW view_ar_time_usage AS
         SELECT ART.ar_number AS ar_number, 
         SUM(ACC.job_duration) AS job_duration,
         TIME_TO_SEC(TIMEDIFF(ART.end_time, ART.start_time)) AS ar_duration
         FROM view_ar_attribute ART LEFT OUTER JOIN view_job_times ACC 
         ON (ART.ar_number = ACC.ar_number AND ACC.exit_status != -1)
         GROUP BY ART.ar_number, ar_duration ORDER BY ART.ar_number
      </sql>
   </item>
   <item>
      <description>Drop the column ju_state from sge_job_usage table</description>
      <sql>
         ALTER TABLE sge_job_usage DROP COLUMN ju_state
      </sql>
   </item> 
   <item>
      <description>Drop the column j_open from sge_job table</description>
      <sql>
         ALTER TABLE sge_job DROP COLUMN j_open
      </sql>
   </item>
   <!-- CR 6646335 - Fix of the name of derived variable in sge_host_values table,
           which holds the count of finished jobs per hour. From this variable 
           finished jobs per a day are calculated. For the consistency we use the same 
           name of variable as for derived values for project and user, therefore the 
           data should be changed. --> 
   <item>
      <description>Updating derived host values variable h_jobs to h_jobs_finished</description>
      <sql>UPDATE sge_host_values 
           SET hv_variable = 'h_jobs_finished' 
           WHERE hv_variable = 'h_jobs'
      </sql>
   </item>              
   <item>
      <description>Update version table</description>
      <sql>
         INSERT INTO sge_version (v_id, v_version, v_time)
         VALUES(8, '6.2', current_timestamp)
      </sql>
   </item>
</version>
  

</DBModel>
