#!/bin/sh
#
#
#  Installation script for the ARCo dbWriter module
#
#  Scriptname: inst_dbwriter
#
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

AUTO=false

umask 022

DBWRITER_PWD=`pwd`
CLEAR=clear
$CLEAR

cd ..

. ./util/arch_variables
. ./util/install_modules/inst_common.sh
. ./util/install_modules/inst_qmaster.sh

CP=$DBWRITER_PWD/lib/arco_common.jar:$DBWRITER_PWD/lib/dbwriter.jar

BasicSettings
SetUpInfoText


EnterPW_oldmods=`stty -g`

. $DBWRITER_PWD/inst_util.sh

# ------------------------------------------------------------------------------
#  This function determine if the 32-bit or 64-bit version of java is
#  installed.
#  Depend on the version of java the JAVA_LIBRARY_PATH is set to the 32-Bit
#  or 64-Bit version of libjuti.so
#  Assumes that JAVA_HOME, ARCH , DBWRITER_PWD and NUM_JAVA_VERSION is set
# ------------------------------------------------------------------------------
queryJavaDataModel() {
   if [ "$JAVA_HOME" = "" ]; then
     $INFOTEXT -n "Error: JAVA_HOME not set"
     exit 1
   fi

   if [ $NUM_JAVA_VERSION -lt 14200 ]; then
      # java before 1.4.2 has no -d32 or -d64 option
      JAVA_DATA_MODEL=""
   else
      # for 64-bit platform we try to use the 64-bit datamodel
      case "$ARCH" in
        *64)  JAVA_DATA_MODEL="-d64";;
          *)  JAVA_DATA_MODEL="";;
      esac
   fi
   
   JAVA_LIBRARY_PATH=$SGE_ROOT/lib/$ARCH
   $JAVA_HOME/bin/java $JAVA_DATA_MODEL -cp $DBWRITER_PWD/lib/arco_common.jar \
                       -Djava.library.path=$JAVA_LIBRARY_PATH \
                       com.sun.grid.util.GetPid > /dev/null 2>&1
   if [ $? -ne 0 ]; then
   
      if [ "$JAVA_DATA_MODEL" = "" ]; then
         # we have no -d32/-d64 switch, give up
         $INFOTEXT "ERROR: java can not load libjuti.so. dbwriter will not work"
         exit 1
      fi
      
      JAVA_DATA_MODEL=""      
      case "$ARCH" in
        sol-sparc64)  NEW_ARCH="sol-sparc";;
          sol-amd64)  NEW_ARCH="sol-x86";;
         lx24-amd64)  NEW_ARCH="lx24-x86";;
                  *)
           # we have a 32-bit platform, however libjuti.so cound not be loaded
           # exit with an errlr
           $INFOTEXT "ERROR: java can not load libjuti.so. dbwriter will not work"
           exit 1
      esac
      JAVA_LIBRARY_PATH=$SGE_ROOT/lib/$NEW_ARCH
      
      if [ ! -d $JAVA_LIBRARY_PATH ]; then
         $INFOTEXT "\nERROR: This java version does not support 64-bit native libraries,"
         $INFOTEXT "       The use of libjuti.so from the $NEW_ARCH binaries would be "
         $INFOTEXT "       possible, but the packages are not installed."
         $INFOTEXT "       Please install a 64-Bit java version or the @@GRID_ENGINE_NAME@@ 32-bit binary packages"
         $INFOTEXT "       for the architecture ${NEW_ARCH}!"
         exit 1
      fi
      
      $JAVA_HOME/bin/java $JAVA_DATA_MODEL -cp $DBWRITER_PWD/lib/arco_common.jar \
                          -Djava.library.path=$JAVA_LIBRARY_PATH \
                          com.sun.grid.util.GetPid > /dev/null 2>&1
      if [ $? -ne 0 ]; then
           $INFOTEXT "ERROR: java can not load libjuti.so. dbwriter will not work"
           exit 1
      else
         JAVA_LIBRARY_PATH="\$SGE_ROOT/lib/$NEW_ARCH"

         $INFOTEXT "\nWARNING: This java version does not support 64-bit native libraries,"
         $INFOTEXT "         dbwriter will use the 32-bit version of libjuti.so"
         $INFOTEXT "         from (<SGE_ROOT>/lib/$NEW_ARCH)\n".
         $INFOTEXT -wait -n "Hit <RETURN> to continue >> "
      fi
   else
      JAVA_LIBRARY_PATH="\$SGE_ROOT/lib/$ARCH"
   fi
}

# ---------------------------------------------------------------
# queryParam
# This function collects all setup parameters
# ---------------------------------------------------------------
queryParams()
{
   $CLEAR
   ProcessSGERoot
   $CLEAR
   GetCell

   SetAdminUser
   queryJavaHome "1.4.1"

   queryJavaDataModel

   $CLEAR

   $INFOTEXT -u "\nSetup your database connection parameters"
   $INFOTEXT " "

   # set the default database user
   DB_USER=arco_write
   while : 
   do
     dummy=""
     $INFOTEXT -n \
              "\nEnter your database type ( o = Oracle, p = PostgreSQL, m = MySQL ) [$dummy] >> "
     result=`Enter $dummy`
     if [ $result = 'p' ]; then
         queryPostgres
     elif [ $result = 'o' ]; then
         queryOracle
     elif [ $result = 'm' ]; then
         queryMysql
     fi

     $CLEAR

     $INFOTEXT -u "Database connection test"
     
     searchJDBCDriverJar $DB_DRIVER $DBWRITER_PWD/lib

     for i in  $DBWRITER_PWD/lib/*.jar; do
         CP=$CP:$i
     done

     testDB $DBWRITER_PWD
     if [ $? -eq 0 ]; then
        $INFOTEXT -wait -n "\nHit <RETURN> to continue >> "    
        break
     else
        $INFOTEXT -ask y n -def y \
                  -n "Do you want to repeat database connection setup? (y/n) [y] >>" 
        if [ $? -ne 0 ]; then
           break
        fi
     fi
     
   done

   $CLEAR   
   $INFOTEXT -u "Generic parameters"

   dummy=60
   while :
   do
      $INFOTEXT -n "\nPlease enter the interval between two dbwriter runs in seconds [$dummy] >> "
      INTERVAL=`Enter $dummy`
      expr $INTERVAL + 1 > /dev/null 2> /dev/null
      if [ $? -le 1 ]; then
         break
      else
         $INFOTEXT "the interval must be a numerical string"
      fi
   done

#   In SGE the path of the report file is fix
#   We don't need to query this parameter
#   dummy="\$SGE_ROOT/\$SGE_CELL/common/reporting"
#   $INFOTEXT -n "\nPlease enter the @@GRID_ENGINE_NAME@@ reporting file [$dummy] >> "
#   REPORTING_FILE=`Enter $dummy`
    REPORTING_FILE="\$SGE_ROOT/\$SGE_CELL/common/reporting"
	 
	dummy="\$SGE_ROOT/\$SGE_CELL/spool/dbwriter"
	$INFOTEXT -n "\nPlease enter the path of the dbwriter spool directory [$dummy]>> "
	SPOOL_DIR=`Enter $dummy`
	
   if [ $DB_DRIVER = "oracle.jdbc.driver.OracleDriver" ]; then
      dummy="\$SGE_ROOT/dbwriter/database/oracle/dbwriter.xml"
   elif [ $DB_DRIVER = "org.postgresql.Driver" ]; then
      dummy="\$SGE_ROOT/dbwriter/database/postgres/dbwriter.xml"
   elif [ $DB_DRIVER = "com.mysql.jdbc.Driver" ]; then
      dummy="\$SGE_ROOT/dbwriter/database/mysql/dbwriter.xml"
   fi
   $INFOTEXT -n "\nPlease enter the file with the derived value rules [$dummy] >> "
   DERIVED_FILE=`Enter $dummy`


   dummy="INFO"
   $INFOTEXT "\nThe dbWriter can run with different debug levels"
   $INFOTEXT "Possible values: WARNING INFO CONFIG FINE FINER FINEST" 

   while :
   do
      $INFOTEXT -n "Please enter the debug level of the dbwriter [$dummy] >> "
      DEBUG_LEVEL=`Enter $dummy`
      case "$DEBUG_LEVEL" in
       "WARNING")  break;;
       "INFO")     break;;
       "CONFIG")   break;;
       "FINE")     break;;
       "FINER")    break;;
       "FINEST")   break;;
       *)
          $INFOTEXT "Invalid debug level";;
       esac
   done
}


#
#  Main
#

$INFOTEXT -u "\nWelcome to the @@GRID_ENGINE_NAME@@ installation"
$INFOTEXT -u "\n@@GRID_ENGINE_NAME@@ dbWriter installation"

$INFOTEXT "The dbWriter installation will take approximately 5 minutes\n"

$INFOTEXT -wait -n "Hit <RETURN> to continue >> "

euid=`$SGE_UTILBIN/uidgid -euid`

if [ "$euid" != "0" ]; then
  $INFOTEXT "dbwriter installation must be started as root"
  exit 1
fi

while :
do
   queryParams

   $CLEAR

   $INFOTEXT -u "\nAll parameters are now collected"

   $INFOTEXT "\n"
   $INFOTEXT "      SGE_ROOT=$SGE_ROOT"
   $INFOTEXT "      SGE_CELL=$SGE_CELL"
   $INFOTEXT "     JAVA_HOME=$JAVA_HOME ($JAVA_VERSION)"
   $INFOTEXT "        DB_URL=$DB_URL"
   $INFOTEXT "       DB_USER=$DB_USER"
   $INFOTEXT "     DB_SCHEMA=$DB_SCHEMA"
   $INFOTEXT "      INTERVAL=$INTERVAL"
   $INFOTEXT "REPORTING_FILE=$REPORTING_FILE"
	$INFOTEXT "     SPOOL_DIR=$SPOOL_DIR"
   $INFOTEXT "  DERIVED_FILE=$DERIVED_FILE"
   $INFOTEXT "   DEBUG_LEVEL=$DEBUG_LEVEL"

   $INFOTEXT -ask y n -def y -n "\nAre this settings correct? (y/n) [y] >> "
   if [ $? -eq 0 ]; then
       break;
   fi
done



UTILDIR=$SGE_ROOT/dbwriter/util

$INFOTEXT "\nCreate start script sgedbwriter in $SGE_ROOT/$SGE_CELL/common"

TMP_FILE=/tmp/sgedbwriter.$$
ExecuteAsAdmin touch $TMP_FILE
ExecuteAsAdmin chmod 755 $TMP_FILE

sed -e "s%@@SGE_ROOT@@%${SGE_ROOT}%g"                   \
    -e "s%@@SGE_CELL@@%${SGE_CELL}%g"                   \
    -e "s%@@JAVA_HOME@@%${JAVA_HOME}%g"                 \
    -e "s%@@JAVA_LIBRARY_PATH@@%${JAVA_LIBRARY_PATH}%g" \
    -e "s%@@JAVA_DATA_MODEL@@%${JAVA_DATA_MODEL}%g"     \
    $UTILDIR/sgedbwriter_template > $TMP_FILE

ExecuteAsAdmin mv $TMP_FILE $SGE_ROOT/$SGE_CELL/common/sgedbwriter

CONFDIR=$SGE_ROOT/$SGE_CELL/common
$INFOTEXT "\nCreate configuration file for dbWriter in $CONFDIR"

TMP_FILE=/tmp/dbwriter.conf.$$
ExecuteAsAdmin touch $TMP_FILE
ExecuteAsAdmin chmod 600 $TMP_FILE

sed -e "s%@@DB_USER_PW@@%${DB_PW}%g" \
    -e "s%@@DB_USER@@%${DB_USER}%g"       \
    -e "s%@@DB_URL@@%${DB_URL}%g"         \
    -e "s%@@DB_SCHEMA@@%${DB_SCHEMA}%g"   \
    -e "s%@@DB_DRIVER@@%${DB_DRIVER}%g"   \
    -e "s%@@DERIVED_FILE@@%${DERIVED_FILE}%g" \
    -e "s%@@DELETE_FILE@@%${DELETE_FILE}%g" \
    -e "s%@@REPORTING_FILE@@%${REPORTING_FILE}%g" \
    -e "s%@@DEBUG_LEVEL@@%${DEBUG_LEVEL}%g" \
    -e "s%@@INTERVAL@@%${INTERVAL}%g" \
	 -e "s%@@SPOOL_DIR@@%${SPOOL_DIR}%g" \
   $UTILDIR/dbwriter.conf_template > $TMP_FILE 
	
ExecuteAsAdmin mv $TMP_FILE	$CONFDIR/dbwriter.conf

$INFOTEXT -wait -n "\nHit <RETURN> to continue >> "    

#
#  Setup parameter for the InstallRcScript function
#
STARTUP_FILE_NAME=sgedbwriter
S95NAME=S96sgedbwriter
K03NAME=K03sgedbwriter
DAEMON_NAME="dbwriter"
SGE_STARTUP_FILE=$SGE_ROOT/$SGE_CELL/common/sgedbwriter
ADD_TO_RC=false

$CLEAR 

InstallRcScript


$INFOTEXT "Installation of dbWriter completed"

