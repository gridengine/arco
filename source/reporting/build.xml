<?xml version="1.0" encoding="UTF-8"?>
<!--

#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

-->
<project basedir="." default="all" name="reporting">
   
   <!-- ################################################################## -->
   <!-- Adjust build.properties to your own environment                    -->
   <!-- ################################################################## -->
    
   <property file="../build_private.properties"/>
   <property file="../build.properties"/>
   
   <property name="app.name" value="ARCo"/>
   
   <property name="build.dir" value="${basedir}/target"/>
   <property name="dist.dir" value="${build.dir}/reporting"/>
   <property name="dist.lib.dir" value="${dist.dir}/WEB-INF/lib/"/>
   <property name="classes" value="${build.dir}/classes"/>
   <property name="gen.src" value="${build.dir}/gensrc"/>
   <property name="test.classes" value="${build.dir}/testclasses"/>
   
   <property name="common.dir" value="../common"/>
   <property name="common.src" value="${common.dir}/src"/>
   <property name="common.jar" value="${common.dir}/arco_common.jar"/>
   
   <property name="deploy.dir" value="${webapps.home}/reporting"/>
   
   
   <!-- ################################################################## -->
   <!-- Initialize project setup                                           -->
   <!-- ################################################################## -->
   <target name="init">
      <mkdir dir="${build.dir}"/>
      <mkdir dir="${dist.dir}"/>
      <mkdir dir="${dist.lib.dir}"/>
      <mkdir dir="${classes}"/>
      <mkdir dir="${gen.src}"/>
      
      <echo>deploy host is ${deploy.host}</echo>
      
      <exec executable="hostname" outputproperty="hostname"/>
      
      <path id="jaxb.reporting.classpath">
         <fileset dir="${jwsdp.home}" includes="jaxb/lib/*.jar" />
         <fileset dir="${jwsdp.home}" includes="jwsdp-shared/lib/*.jar" />
         <fileset dir="${jwsdp.home}" includes="jaxp/lib/**/*.jar" />
      </path>
      
      <path id="swc.classpath">
         <pathelement location="${swc3.0.jato.jar}"/>
         <pathelement location="${swc3.0.cc.jar}"/>
         <pathelement location="${swc3.0.serviceapi.jar}"/>
         <pathelement location="${swc3.0.serviceimpl.jar}"/>
         <pathelement location="${swc3.0.webcommon.jar}"/>
         <pathelement location="${swc3.0.consoleutil.jar}"/>
      </path>
      
      <path id="3rdparty.classpath">
         <pathelement location="${jfreechart.jar}"/>
         <pathelement location="${jcommon.jar}"/>
         <pathelement location="${avalon.jar}"/>
         <pathelement location="${fop.jar}"/>
         <pathelement location="${batik.jar}"/>         
         <pathelement location="${jimi.zip}"/>
      </path>
      
      <path id="compile.classpath">
      <!--pathelement path="${classpath}/"/-->
      <pathelement path="${swc3.0.servlet.jar}"/>
      <pathelement path="${common.jar}"/>
      <pathelement location="${oracle.jdbcdriver}"/>
      <pathelement location="${postgres.jdbcdriver}"/>
      <pathelement location="${mysql.jdbcdriver}"/>
      <path        refid="jaxb.reporting.classpath"/>
      <path        refid="3rdparty.classpath"/>
      <path        refid="swc.classpath"/>
      </path>
      
   </target>
   
   <target depends="init" name="gensource">
      
      <mkdir dir="${gen.src}/com/sun/grid/arco"/>
      <echo file="${gen.src}/com/sun/grid/arco/ArcoVersion.java">
         // DO not edit this file, it is created by build.xml
         package com.sun.grid.arco;
         public interface ArcoVersion {
         public final static String PLUGIN_NAME = "com.sun.grid.arco";
         public final static String VERSION = "${product.version}";
         public final static String SHORT_PATH = "reporting";
         }
      </echo>
   </target>
   
   
   <!-- ############# ARCo common ########################################## -->
    
   <target name="arco.common"> 
      <ant antfile="${common.dir}/build.xml" target="jar"
           inheritall="false" inheritrefs="false"/>
   </target>
   
   <target name="arco.common.clean"> 
      <ant antfile="${common.dir}/build.xml" target="clean"
           inheritall="false" inheritrefs="false"/>
   </target>
   
   
   <!-- ############## J A X B ############################################# -->
   <target name="jaxb.reporting.required">
      <uptodate property="jaxb.reporting.dirty"
                srcfile="${basedir}/arco.xsd"
                targetfile="${gen.src}/com/sun/grid/arco/model/jaxb.properties"/>
   </target>
   
   <target name="jaxb.reporting.init" depends="init">
      
      <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
         <classpath refid="jaxb.reporting.classpath" />
      </taskdef>
      
   </target>
   
   <target name="jaxb.reporting" depends="jaxb.reporting.init,jaxb.reporting.required" unless="jaxb.reporting.dirty">
      <!-- Remove old files -->      
      <delete dir="${gen.src}/com/sun/grid/arco/model"/>
      <xjc schema="arco.xsd" extension="true" target="${gen.src}" package="com.sun.grid.arco.model"/>
      
      <!--
        We set the defaultImplementations of the JAXB ObjectFactory to public
        to allow the introspection of the JAXB type mapping
        This is used in the class AbstractObjectModel to intialize the 
        type mapping
        -->
      <replace file="${gen.src}/com/sun/grid/arco/model/ObjectFactory.java"
               token="private static java.util.HashMap defaultImplementations"
               value="public static java.util.HashMap defaultImplementations"/>
      
   </target>
   
   
   
   <!-- ###################### Compile #################################### -->
   <!-- Compile the classes in the WEB-INF/classes directory.  For a larger app,-->
   <!-- this would be better off creating a jar file in the WEB-INF/lib directory. -->
   <!-- ################################################################### -->
   <target name="compile" depends="init, arco.common, gensource, jaxb.reporting">
      <javac debug="${javac.debug}" deprecation="false" destdir="${classes}" target="${javac.target}" source="${javac.source}">
         <src path="src"/>
         <src path="${gen.src}"/>
         <classpath refid="compile.classpath"/>
      </javac>
      <echo>java version is ${java.version}</echo>
   </target>
   
   <!-- #################################################################### -->
   <!-- Replace the version information in the relevant files                -->
   <!-- #################################################################### -->
   <target name="version" depends="init">
      
      <mkdir dir="${dist.dir}/util"/>
      
      <copy file="util/app-2.0.xml.template" tofile="${dist.dir}/util/app-2.0.xml" 
            overwrite="true"/>
      <replace file="${dist.dir}/util/app-2.0.xml">
         <replacefilter token="@@@PRODUCT@@@" value="${product.longname}"/>
         <replacefilter token="@@@VERSION@@@" value="${product.version}"/>
         <replacefilter token="@@@APPLICATION@@@" value="${app.name}"/>
      </replace>
      
      <copy file="util/app-2.1.xml.template" tofile="${dist.dir}/util/app-2.1.xml" 
            overwrite="true"/>
      
      <replace file="${dist.dir}/util/app-2.1.xml">
         <replacefilter token="@@@PRODUCT@@@" value="${product.longname}"/>
         <replacefilter token="@@@VERSION@@@" value="${product.version}"/>
         <replacefilter token="@@@APPLICATION@@@" value="${app.name}"/>
      </replace>
      
      <copy file="util/app-2.2.xml.template"
            tofile="${dist.dir}/util/app-2.2.xml"
            overwrite="true"/>
      
      <replace file="${dist.dir}/util/app-2.2.xml">
         <replacefilter token="@@@PRODUCT@@@" value="${product.longname}"/>
         <replacefilter token="@@@VERSION@@@" value="${product.version}"/>
         <replacefilter token="@@@APPLICATION@@@" value="${app.name}"/>
      </replace>
      
      <copy file="util/app-3.0.xml.template"
            tofile="${dist.dir}/util/app-3.0.xml"
            overwrite="true"/>
      
      <replace file="${dist.dir}/util/app-3.0.xml">
         <replacefilter token="@@@PRODUCT@@@" value="${product.longname}"/>
         <replacefilter token="@@@VERSION@@@" value="${product.version}"/>
         <replacefilter token="@@@APPLICATION@@@" value="${app.name}"/>
      </replace>
      
      <!--since SWC 3.0 we also need different web.xml files. For SWC < 3.0 the
        web.xml cannot contain the Registrar Servlet -->
        
      <copy file="util/web-2x.xml.template"
            tofile="${dist.dir}/util/web-2x.xml"
            overwrite="true"/>
      
      <copy file="util/web-3x.xml.template"
            tofile="${dist.dir}/util/web-3x.xml"
            overwrite="true"/>
      
      <tstamp>
         <format property="APPL_BUILD_DATE" pattern="yyyy/MM/dd" locale="en"/>
      </tstamp>
      
      <mkdir dir="${dist.dir}/html/en"/>
      <echo file="${dist.dir}/html/en/version.txt" message="${product.version}"/>
      <echo file="${dist.dir}/html/en/versionDate.txt" message="${APPL_BUILD_DATE}"/>
      
      <concat destfile="${dist.dir}/html/en/example_version.shtml">
         <filelist dir="html/en" files="example_version.prefix"/>
         <filelist dir="${product.copyright.dir}" files="COPYRIGHT-short.html"/>
         <filelist dir="html/en" files="example_version.suffix"/>
      </concat>
   </target>
   
   <!-- ###################### all ########################################## -->
    
   <!-- #################################################################### -->
   <target depends="init" description="Build everything." name="all">
      <antcall target="targz"/>
      <echo message="[INFO] ${product.longname} ${product.version} built."/>
   </target>
   
   <!-- ###################### clean ########################################## -->
   <target description="Clean all build products." depends="arco.common.clean" name="clean">
      <delete dir="${build.dir}"/>
   </target>
   
   
   <target name="jar" depends="compile"
           description="Build the reporting.jar file">
      
      <copy file="${common.dir}/manifest.template" tofile="${build.dir}/manifest.txt"/>
      <replace file="${build.dir}/manifest.txt">
         <replacefilter token="@@@PRODUCT@@@" value="${product.longname}"/>
         <replacefilter token="@@@VERSION@@@" value="${product.version}"/>
         <replacefilter token="@@@APPLICATION@@@" value="${app.name}"/>
      </replace>
      
      <jar basedir="${classes}" destfile="${dist.lib.dir}/reporting.jar"
           manifest="${build.dir}/manifest.txt">
         <fileset dir="${classes}">
            <exclude name="**/tests/*.class"/>
         </fileset>
         <fileset dir="src">
            <include name="**/*.properties"/>
            <include name="**/*.xml"/>
         </fileset>
         <fileset dir="${gen.src}">
            <include name="**/*.properties"/>
            <include name="**/*.ser"/>
         </fileset>
         
         <fileset dir="${product.copyright.dir}" includes="COPYRIGHT"/>
      </jar>
   </target>
   
   
   <!-- 
    ################################################################## 
    #   Copy all needed libs from the webservice development kit
    #   into WEB-INF/lib
    #   Remove the Sealed option from the manifest of jaxb-impl.jar
    ##################################################################    
    -->
   <target name="jaxb.reporting.copylibs">
      
      <copy todir="${dist.lib.dir}">
         <fileset dir="${jwsdp.home}/jwsdp-shared/lib">
            <include name="jax-qname.jar"/>
            <include name="relaxngDatatype.jar"/>
            <include name="xsdlib.jar"/>
            <include name="namespace.jar"/>
         </fileset>
         <fileset dir="${jwsdp.home}/jaxb/lib">
            <include name="jaxb-*.jar"/>
         </fileset>
      </copy>
      
      <unzip src="${dist.lib.dir}/jaxb-impl.jar"
             dest="${build.dir}">
         <patternset>
            <include name="META-INF/MANIFEST.MF"/>
         </patternset>
      </unzip>
      
      <replace file="${build.dir}/META-INF/MANIFEST.MF"
               token="Sealed: true" value="Sealed: false"/>
      
      <zip destfile="${dist.lib.dir}/jaxb-impl.jar" update="true">
         <fileset dir="${build.dir}">
            <include name="META-INF/MANIFEST.MF"/>
         </fileset>
      </zip>
      <delete dir="${build.dir}/META-INF"/>
   </target>
   
   
   <!-- Builds the index for the javahelp2 system -->
   <target name="javahelp.jhindexer">
      <exec executable="${jh.home}/bin/jhindexer" dir="html/en/help" failonerror="true">
         <arg line="-db ${dist.dir}/html/en/help/JavaHelpSearch index.html datamodel.html"/>
      </exec>
   </target>
   
   <target name="javahelp" depends="init, javahelp.jhindexer">
      <copy todir="${dist.dir}">
         <fileset dir="${basedir}">
            <include name="html/**/*.css"/>
            <include name="html/**/*.html"/>
            <include name="html/**/*.shtml"/>
            <include name="html/**/*.txt"/>
            <include name="html/**/*.jhm"/>
            <include name="html/**/*.hs"/>
            <include name="html/**/*.xml"/>
            <include name="html/**/*.gif"/>
            <include name="html/**/*.png"/>
         </fileset>
      </copy>
   </target>
   
   <!-- ####### build a distribution from scratch ####### -->
   <target depends="clean, init, jar" name="dist" 
           description="build a distribution from scratch">
      <antcall target="targz"/>       
   </target>
   
   <target name="man.init" depends="init">
      <mkdir dir="${build.dir}/man" />
      <mkdir dir="${build.dir}/catman" />
      <condition property="doAscMan">
         <equals arg1="${ascman.host}" arg2="${hostname}"/>
      </condition>
      <condition property="doCatMan">
         <equals arg1="${catman.host}" arg2="${hostname}"/>
      </condition>
   </target>
   
   <!-- Convert magic strings.  See source/scripts/mk_ascman.sh -->
   <target name="man" depends="man.init, man.asc, man.cat"/>
   
   <target name="man.asc" depends="man.init" if="doAscMan">
      
      <property name="man.ASCII" value="1"/>
      <property name="man.HTML"  value="0"/>
      <property name="man.useKVFlag" value="1"/>
      
      <exec dir="${basedir}" executable="${sge.srcdir}/scripts/mk_ascman" failonerror="true">
         <arg value="${basedir}"/>
         <arg value="${man.mode}"/>
         <arg value="${man.ASCII}"/>
         <arg value="${man.HTML}"/>
         <arg value="${man.useKVFlag}"/>
         <arg value="arco/source/reporting/man"/>
         <arg value="${build.dir}/MANSBUILD"/>
      </exec>
   </target>      
   
   <target name="man.cat" depends="man.init" if="doCatMan">    
      
      <available file="${build.dir}/MANSBUILD/ASCMAN/man/man1/arcorun" property="ascman.present"/>
      
      <fail unless="ascman.present">
         Please build the acsii man pages on host ${ascman.host} before building the cat man pages.
      </fail>
      
      <exec dir="${basedir}" executable="${sge.srcdir}/scripts/mk_catman" failonerror="true">
         <arg value="${basedir}"/>
         <arg value="${man.mode}"/>
         <arg value="${build.dir}/MANSBUILD"/>
      </exec>
      
      <move file="${build.dir}/MANSBUILD/ASCMAN/man/man1/arcorun"
            tofile="${build.dir}/MANSBUILD/ASCMAN/man/man1/arcorun.1" failonerror="false"/>
      
   </target>
   
   <target name="targz" description="build the tar.gz file" depends="jar, version, javahelp, man">
      <copy file="${common.dir}/inst_util.sh" todir="${dist.dir}"/>
      <antcall target="jaxb.reporting.copylibs"/>
      
      <copy todir="${dist.lib.dir}" file="${avalon.jar}"/>
      <copy todir="${dist.lib.dir}" file="${batik.jar}"/>
      <copy todir="${dist.lib.dir}" file="${fop.jar}"/>
      <copy tofile="${dist.lib.dir}/JimiProClasses.jar" file="${jimi.zip}"/>
      <copy todir="${dist.lib.dir}" file="${jfreechart.jar}"/>
      <copy todir="${dist.lib.dir}" file="${jcommon.jar}"/>
      
      <copy todir="${dist.lib.dir}" file="${postgres.jdbcdriver}"/>
      
      <copy todir="${dist.lib.dir}" file="${common.jar}" />
      
      <mkdir dir="${build.dir}/MANSBUILD/SEDMAN"/>
      <mkdir dir="${build.dir}/MANSBUILD/ASCMAN"/>
      <mkdir dir="${build.dir}/MANSBUILD/ASCMAN/man/man1"/>
      
      <copy todir="${dist.dir}">
         <fileset dir="${basedir}">
            <include name="arcorun"/>
            <include name="inst_reporting"/>           
            <include name="dbpwd"/>
            <include name="util/config.xml.template"/>
            <include name="images/*.gif"/>
            <include name="images/*.png"/>
            <include name="xslt/*.xsl"/>
            <include name="js/**/*.js"/>
            <include name="jsp/**/*.jsp"/>
            <include name="jsp/**/*.xml"/>
            <include name="js/**/*.js"/>
            <include name="doc/*.xml"/>
            <include name="WEB-INF/*.xml" />
            <include name="database/example_queries/**/*.xml"/>
            <include name="html/**/*.css"/>
            <include name="html/**/*.html"/>
            <include name="html/**/*.shtml"/>
            <include name="html/**/*.txt"/>
            <include name="html/**/*.xml"/>
            <include name="html/**/images/*.gif"/>
            <include name="html/**/images/*.png"/>
            <include name="html/en/help/app.hs"/>
            <include name="html/en/help/appIndex.xml"/>
            <include name="html/en/help/appTOC.xml"/>
            <include name="html/en/help/Map.jhm"/>
            <exclude name="WEB-INF/sun-web.xml"/>
         </fileset>
      </copy>
      <replace dir="${dist.dir}">
         <include name="arcorun"/>
         <include name="inst_reporting"/>
         <include name="dbpwd"/>
         <include name="util/config.xml.template"/>
         <include name="images/*.gif"/>
         <include name="images/*.png"/>
         <include name="xslt/*.xsl"/>
         <include name="js/**/*.js"/>
         <include name="jsp/**/*.jsp"/>
         <include name="jsp/**/*.xml"/>
         <include name="js/**/*.js"/>
         <include name="doc/*.xml"/>
         <include name="WEB-INF/*.xml" />
         <include name="database/example_queries/**/*.xml"/>
         <include name="html/**/*.css"/>
         <include name="html/**/*.html"/>
         <include name="html/**/*.shtml"/>
         <include name="html/**/*.txt"/>
         <include name="html/**/*.xml"/>
         <include name="html/**/images/*.gif"/>
         <include name="html/**/images/*.png"/>
         <include name="html/en/help/app.hs"/>
         <include name="html/en/help/appIndex.xml"/>
         <include name="html/en/help/appTOC.xml"/>
         <include name="html/en/help/Map.jhm"/>
         <replacefilter token="@@ARCO_NAME@@" value="${product.arco.name}"/>
         <replacefilter token="@@GRID_ENGINE_NAME@@" value="${product.gridengine.name}"/>
         <replacefilter token="@@ARCO_VERSION@@" value="${product.version}" />
         <replacefilter token="@@PRODUCT_LONG_NAME@@" value="${product.longname}" />
         <replacefilter token="@@APP_NAME@@" value="${app.name}" />
      </replace>
      
      <tar destfile="reporting.tar">
         <tarfileset dir="${build.dir}" mode="755">
            <include name="reporting/arcorun"/>
            <include name="reporting/inst_reporting"/>
            <include name="reporting/dbpwd"/>
         </tarfileset>
         <tarfileset dir="${build.dir}" mode="644">
            <include name="reporting/inst_util.sh"/>
            <include name="reporting/util/*.xml.template"/>
            <include name="reporting/util/*.xml"/>
            <include name="reporting/**/*.gif"/>
            <include name="reporting/**/*.png"/>         
            <include name="reporting/xslt/*.xsl"/>
            <include name="reporting/jsp/**/*.jsp"/>
            <include name="reporting/jsp/**/*.xml"/>
            <include name="reporting/js/**/*.js"/>
            <include name="reporting/doc/*.xml"/>
            <include name="reporting/WEB-INF/lib/*.jar"/>
            <include name="reporting/WEB-INF/*.xml" />
            <include name="reporting/database/example_queries/**/*.xml"/>
            <include name="reporting/html/**/*.css"/>
            <include name="reporting/html/**/*.html"/>
            <include name="reporting/html/**/*.shtml"/>
            <include name="reporting/html/**/*.txt"/>
            <include name="reporting/html/en/help/app.hs"/>
            <include name="reporting/html/en/help/appIndex.xml"/>
            <include name="reporting/html/en/help/appTOC.xml"/>
            <include name="reporting/html/en/help/Map.jhm"/>
            <include name="reporting/html/en/help/JavaHelpSearch/*"/>
         </tarfileset>
         <tarfileset dir="${build.dir}/MANSBUILD/SEDMAN" mode="644">
            <include name="man/**"/>
         </tarfileset>
         <tarfileset dir="${build.dir}/MANSBUILD/ASCMAN" mode="644">
            <include name="catman/**"/>
         </tarfileset>
         <tarfileset dir="${build.dir}/MANSBUILD/ASCMAN/man/man1" mode="644" prefix="catman/cat/cat1">
            <include name="*"/>
         </tarfileset>
      </tar>
      <gzip src="reporting.tar" zipfile="reporting.tar.gz"/>
      <delete file="${basedir}/reporting.tar"/>
   </target>
   
   <target name="deploy.jsp"
           description="Deploy JSPs only">
      <copy todir="${deploy.dir}">
         <fileset dir="${basedir}">
            <include name="jsp/**/*.jsp"/>
            <include name="jsp/**/*.xml"/>
            <include name="js/**/*.js"/>
            <include name="xslt/*.xsl"/>
            <include name="html/**/*.css"/>
            <include name="html/**/*.html"/>
            <include name="html/**/*.shtml"/>
            <include name="html/**/*.txt"/>
            <include name="html/**/*.jhm"/>
            <include name="html/**/*.hs"/>
            <include name="html/**/*.xml"/>
            <include name="html/**/images/*.gif"/>
            <include name="html/**/images/*.png"/>
            
         </fileset>
      </copy>      
   </target>
   
   <target name="deploy" depends="jar"
           description="stop SWC, deploy WEBAPP, start SWC">
      
      <fail unless="swccontrol.jar">
         Please define the swccontrol.jar property pointing to SWCControl.jar in your build_private.properties. 
      </fail>   
      
      <taskdef name="swc" 
               classname="com.sun.web.swccontrol.SWCControlTask"
               classpath="${swccontrol.jar}"/>
      
      <swc url="//${deploy.host}:${deploy.port}/${deploy.name}" command="stop"/>
      <copy todir="${deploy.dir}">
         <fileset dir="${dist.dir}">
            <include name="WEB-INF/lib/*.jar"/>
            <include name="WEB-INF/lib/*.zip"/>
         </fileset>
         <fileset dir="${basedir}">
            <include name="jsp/**/*.jsp"/>
            <include name="jsp/**/*.xml"/>
            <include name="js/**/*.js"/>
         </fileset>
      </copy>      
      <swc url="//${deploy.host}:${deploy.port}/${deploy.name}" command="start"/>
      
   </target>
   
   <!-- ================ Test ============================================  -->
   <!-- junit.jar is needed in the classpath of ant                         -->
   <!-- ==================================================================  -->
   <target name="test.init" depends="init, test.classpath.from.sge.root, test.classpath.from.source">
      <mkdir dir="${test.classes}"/>
      
      <path id="test.classpath">
      <path refid="test.compile.classpath"/>
         <pathelement location="${postgres.jdbcdriver}"/>
         <pathelement location="${oracle.jdbcdriver}"/>
         <pathelement location="${mysql.jdbcdriver}"/>
         <pathelement path="${java.class.path}"/>
         <pathelement location="${test.classes}"/>
      </path>
      
   </target>
   
   <!-- This target setup the test.compile.claspath to SGE_ROOT/dbwriter/lib/*.jar
    if the proeprties use.classpath.from.sge.root is set -->
   <target name="test.classpath.from.sge.root" depends="init" if="use.classpath.from.sge.root">
      
      <echo>Use jar files from ${sge.root}/reporting/WEB-INF/lib</echo>
      
      <path id="test.compile.classpath">
         <pathelement path="${classpath}"/>
         <fileset dir="${sge.root}/reporting/WEB-INF/lib">
            <include name="*.jar"/>
         </fileset>
      </path>
   </target>
   
   <!-- This target setup the test.compile.claspath to SGE_ROOT/dbwriter/lib/*.jar
    if the properties use.classpath.from.sge.root is not set -->
    
   <target name="test.classpath.from.source" depends="init" unless="use.classpath.from.sge.root">
      <echo>Use jar files from ${dist.lib.dir}</echo>
      <path id="test.compile.classpath">
      <pathelement path="${classpath}"/>
      <path refid="compile.classpath"/>
         <pathelement location="${dist.lib.dir}/reporting.jar"/>
      </path>
   </target>
   
   
   <target name="test.compile" depends="test.init, jar">
      
      <javac debug="${javac.debug}" deprecation="false" destdir="${test.classes}" target="${javac.target}" source="${javac.source}">
         <src path="test"/>
         <classpath refid="test.compile.classpath"/>
      </javac>
   </target>
   
   <target name="test.selected.files" depends="test.compile, jar">
      
      <junit fork="yes" dir="${basedir}" showoutput="true">
         <classpath refid="test.classpath"/>
         <formatter type="plain" usefile="false"/>
         <batchtest todir="${build.dir}">
            <fileset dir="test" includes="${selected.test.class}"/>
         </batchtest>          
      </junit>
      
   </target>
   
   
   <target name="test" depends="test.compile, jar"
           description="run all junit tests">
      
      <junit fork="yes" dir="${basedir}" haltonerror="true" haltonfailure="true"
             showoutput="true">
         
         <classpath refid="test.classpath"/>
         <formatter type="plain" usefile="false"/>
         <test name="com.sun.grid.arco.BugTest"/>
         <test name="com.sun.grid.arco.CloneTest"/>
         <test name="com.sun.grid.arco.sql.SQLGeneratorTest"/>
         <test name="com.sun.grid.arco.sql.SQLParserTest"/>
         <test name="com.sun.grid.arco.FileManagerTest"/>
      </junit>
   </target>
   
   <target name="arcorun.debug" description="Start arcorun in debug mode">
      
      <path id="arcorun.classpath">
      <path path="java.class.path"/>
         <path>
            <fileset dir="${dist.lib.dir}">
               <include name="*.jar"/>
            </fileset>
         </path>
      </path>
      
      <nbjpdastart name="arcorun" addressproperty="jpda.address" transport="dt_socket">
         <classpath refid="arcorun.classpath"/>
         
         <sourcepath>
            <path location="${gen.src}"/>
            <path location="${common.src}"/>
            <path location="src"/>
         </sourcepath>
      </nbjpdastart>
      
      <java classname="com.sun.grid.arco.ArcoRun" 
            fork="true" failonerror="true">
         <jvmarg value="-Xdebug"/>
         <jvmarg value="-Xnoagent"/>
         <jvmarg value="-Djava.compiler=none"/>
         <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
         <jvmarg value="-Darco.home=/var/opt/webconsole/webapps/reporting"/>
         <classpath refid="arcorun.classpath"/>
         <arg line="-n blubber Statistics"/>
      </java>
      
      
   </target>
   
</project>
